// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: place.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createPlace = `-- name: CreatePlace :one
INSERT INTO places (
    google_id,
    tw_display_name,
    jp_display_name,
    primary_type,
    rating,
    user_rating_count,
    jp_formatted_address,
    en_city,
    jp_district,
    international_phone_number,
    tw_weekday_descriptions,
    accessibility_options,
    google_map_uri,
    website_uri,
    photos_name,
    types
) VALUES (
    $1, 
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16
) RETURNING place_id, google_id, tw_display_name, jp_display_name, primary_type, rating, user_rating_count, jp_formatted_address, en_city, jp_district, international_phone_number, tw_weekday_descriptions, accessibility_options, google_map_uri, website_uri, photos_name, types, created_at, updated_at
`

type CreatePlaceParams struct {
	GoogleID                 sql.NullString `json:"google_id"`
	TwDisplayName            sql.NullString `json:"tw_display_name"`
	JpDisplayName            sql.NullString `json:"jp_display_name"`
	PrimaryType              sql.NullString `json:"primary_type"`
	Rating                   sql.NullString `json:"rating"`
	UserRatingCount          sql.NullInt32  `json:"user_rating_count"`
	JpFormattedAddress       sql.NullString `json:"jp_formatted_address"`
	EnCity                   sql.NullString `json:"en_city"`
	JpDistrict               sql.NullString `json:"jp_district"`
	InternationalPhoneNumber sql.NullString `json:"international_phone_number"`
	TwWeekdayDescriptions    []string       `json:"tw_weekday_descriptions"`
	AccessibilityOptions     []string       `json:"accessibility_options"`
	GoogleMapUri             sql.NullString `json:"google_map_uri"`
	WebsiteUri               sql.NullString `json:"website_uri"`
	PhotosName               []string       `json:"photos_name"`
	Types                    []string       `json:"types"`
}

func (q *Queries) CreatePlace(ctx context.Context, arg CreatePlaceParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, createPlace,
		arg.GoogleID,
		arg.TwDisplayName,
		arg.JpDisplayName,
		arg.PrimaryType,
		arg.Rating,
		arg.UserRatingCount,
		arg.JpFormattedAddress,
		arg.EnCity,
		arg.JpDistrict,
		arg.InternationalPhoneNumber,
		pq.Array(arg.TwWeekdayDescriptions),
		pq.Array(arg.AccessibilityOptions),
		arg.GoogleMapUri,
		arg.WebsiteUri,
		pq.Array(arg.PhotosName),
		pq.Array(arg.Types),
	)
	var i Place
	err := row.Scan(
		&i.PlaceID,
		&i.GoogleID,
		&i.TwDisplayName,
		&i.JpDisplayName,
		&i.PrimaryType,
		&i.Rating,
		&i.UserRatingCount,
		&i.JpFormattedAddress,
		&i.EnCity,
		&i.JpDistrict,
		&i.InternationalPhoneNumber,
		pq.Array(&i.TwWeekdayDescriptions),
		pq.Array(&i.AccessibilityOptions),
		&i.GoogleMapUri,
		&i.WebsiteUri,
		pq.Array(&i.PhotosName),
		pq.Array(&i.Types),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlace = `-- name: DeletePlace :exec
DELETE FROM places
WHERE place_id = $1
`

func (q *Queries) DeletePlace(ctx context.Context, placeID int64) error {
	_, err := q.db.ExecContext(ctx, deletePlace, placeID)
	return err
}

const getPlaceByGoogleId = `-- name: GetPlaceByGoogleId :one
SELECT place_id, google_id, tw_display_name, jp_display_name, primary_type, rating, user_rating_count, jp_formatted_address, en_city, jp_district, international_phone_number, tw_weekday_descriptions, accessibility_options, google_map_uri, website_uri, photos_name, types, created_at, updated_at FROM places
WHERE google_id = $1 LIMIT 1
`

func (q *Queries) GetPlaceByGoogleId(ctx context.Context, googleID sql.NullString) (Place, error) {
	row := q.db.QueryRowContext(ctx, getPlaceByGoogleId, googleID)
	var i Place
	err := row.Scan(
		&i.PlaceID,
		&i.GoogleID,
		&i.TwDisplayName,
		&i.JpDisplayName,
		&i.PrimaryType,
		&i.Rating,
		&i.UserRatingCount,
		&i.JpFormattedAddress,
		&i.EnCity,
		&i.JpDistrict,
		&i.InternationalPhoneNumber,
		pq.Array(&i.TwWeekdayDescriptions),
		pq.Array(&i.AccessibilityOptions),
		&i.GoogleMapUri,
		&i.WebsiteUri,
		pq.Array(&i.PhotosName),
		pq.Array(&i.Types),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlaceById = `-- name: GetPlaceById :one
SELECT place_id, google_id, tw_display_name, jp_display_name, primary_type, rating, user_rating_count, jp_formatted_address, en_city, jp_district, international_phone_number, tw_weekday_descriptions, accessibility_options, google_map_uri, website_uri, photos_name, types, created_at, updated_at FROM places
WHERE place_id = $1 LIMIT 1
`

func (q *Queries) GetPlaceById(ctx context.Context, placeID int64) (Place, error) {
	row := q.db.QueryRowContext(ctx, getPlaceById, placeID)
	var i Place
	err := row.Scan(
		&i.PlaceID,
		&i.GoogleID,
		&i.TwDisplayName,
		&i.JpDisplayName,
		&i.PrimaryType,
		&i.Rating,
		&i.UserRatingCount,
		&i.JpFormattedAddress,
		&i.EnCity,
		&i.JpDistrict,
		&i.InternationalPhoneNumber,
		pq.Array(&i.TwWeekdayDescriptions),
		pq.Array(&i.AccessibilityOptions),
		&i.GoogleMapUri,
		&i.WebsiteUri,
		pq.Array(&i.PhotosName),
		pq.Array(&i.Types),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlace = `-- name: UpdatePlace :one
UPDATE places SET
    google_id = COALESCE($1, google_id),
    tw_display_name = COALESCE($2, tw_display_name),
    jp_display_name = COALESCE($3, jp_display_name),
    primary_type = COALESCE($4, primary_type),
    rating = COALESCE($5, rating),
    user_rating_count = COALESCE($6, user_rating_count),
    jp_formatted_address = COALESCE($7, jp_formatted_address),
    en_city = COALESCE($8, en_city),
    jp_district = COALESCE($9, jp_district),
    international_phone_number = COALESCE($10, international_phone_number),
    tw_weekday_descriptions = COALESCE($11, tw_weekday_descriptions),
    accessibility_options = COALESCE($12, accessibility_options),
    google_map_uri = COALESCE($13, google_map_uri),
    website_uri = COALESCE($14, website_uri),
    photos_name = COALESCE($15, photos_name),
    types = COALESCE($16, types)
WHERE place_id = $17
RETURNING place_id, google_id, tw_display_name, jp_display_name, primary_type, rating, user_rating_count, jp_formatted_address, en_city, jp_district, international_phone_number, tw_weekday_descriptions, accessibility_options, google_map_uri, website_uri, photos_name, types, created_at, updated_at
`

type UpdatePlaceParams struct {
	GoogleID                 sql.NullString `json:"google_id"`
	TwDisplayName            sql.NullString `json:"tw_display_name"`
	JpDisplayName            sql.NullString `json:"jp_display_name"`
	PrimaryType              sql.NullString `json:"primary_type"`
	Rating                   sql.NullString `json:"rating"`
	UserRatingCount          sql.NullInt32  `json:"user_rating_count"`
	JpFormattedAddress       sql.NullString `json:"jp_formatted_address"`
	EnCity                   sql.NullString `json:"en_city"`
	JpDistrict               sql.NullString `json:"jp_district"`
	InternationalPhoneNumber sql.NullString `json:"international_phone_number"`
	TwWeekdayDescriptions    []string       `json:"tw_weekday_descriptions"`
	AccessibilityOptions     []string       `json:"accessibility_options"`
	GoogleMapUri             sql.NullString `json:"google_map_uri"`
	WebsiteUri               sql.NullString `json:"website_uri"`
	PhotosName               []string       `json:"photos_name"`
	Types                    []string       `json:"types"`
	PlaceID                  int64          `json:"place_id"`
}

func (q *Queries) UpdatePlace(ctx context.Context, arg UpdatePlaceParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, updatePlace,
		arg.GoogleID,
		arg.TwDisplayName,
		arg.JpDisplayName,
		arg.PrimaryType,
		arg.Rating,
		arg.UserRatingCount,
		arg.JpFormattedAddress,
		arg.EnCity,
		arg.JpDistrict,
		arg.InternationalPhoneNumber,
		pq.Array(arg.TwWeekdayDescriptions),
		pq.Array(arg.AccessibilityOptions),
		arg.GoogleMapUri,
		arg.WebsiteUri,
		pq.Array(arg.PhotosName),
		pq.Array(arg.Types),
		arg.PlaceID,
	)
	var i Place
	err := row.Scan(
		&i.PlaceID,
		&i.GoogleID,
		&i.TwDisplayName,
		&i.JpDisplayName,
		&i.PrimaryType,
		&i.Rating,
		&i.UserRatingCount,
		&i.JpFormattedAddress,
		&i.EnCity,
		&i.JpDistrict,
		&i.InternationalPhoneNumber,
		pq.Array(&i.TwWeekdayDescriptions),
		pq.Array(&i.AccessibilityOptions),
		&i.GoogleMapUri,
		&i.WebsiteUri,
		pq.Array(&i.PhotosName),
		pq.Array(&i.Types),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
