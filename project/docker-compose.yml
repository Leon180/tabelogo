version: '3'

services:

  broker-service:
    build:
      context: ./../broker
      dockerfile: broker.dockerfile
    restart: always
    ports:
      - "8080:8080"
    links:
      - authenticate-service
      - google-map-service
      - tabelog-spider-service
      - logger-service
      - mail-service
    deploy:
      mode: replicated
      replicas: 1

  authenticate-service:
    build:
      context: ./../authenticate
      dockerfile: authenticate.dockerfile
    restart: always
    links: 
      - logger-service
    deploy:
      mode: replicated
      replicas: 1

  google-map-service:
    build:
      context: ./../google-map
      dockerfile: google-map.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
  
  postgres:
    image: 'postgres:14.0'
    ports:
      - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: tabelogo
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/

  tabelog-spider-service:
    build:
      context: ./../tabelog-spider-service
      dockerfile: tabelog-spider-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
  
  logger-service:
    build:
      context: ./../logger-service
      dockerfile: logger-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    links:
      - mongo

  mongo:
    image: 'mongo:4.2.16-bionic'
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: jt79100
    volumes:
      - ./db-data/mongo/:/data/db/
  
  mail-service:
    build:
      context: ./../mail-service
      dockerfile: ./../mail-service/mail-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    links:
      - mailhog

  mailhog:
    image: 'jcalonso/mailhog:latest'
    ports:
      - "8025:8025"

  listener-service:
    build:
      context: ./../listener-service
      dockerfile: listener-service.dockerfile
    deploy:
      mode: replicated
      replicas: 1
    links:
      - rabbitmq

  rabbitmq:
    restart: always
    image: 'rabbitmq:3.9-alpine'
    ports:
      - "5672:5672"
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./db-data/rabbitmq/:/var/lib/rabbitmq/
  
  redis-master:
    image: 'redis:7.0.14-alpine'
    ports:
      - "6379:6379"
    volumes:
      - ./db-data/redis/:/data/

  redis-slave:
    image: 'redis:7.0.14-alpine'
    ports:
      - "6380:6379"
    links:
      - redis-master
    command: redis-server --slaveof redis-master 6379
  
  redis-sentinel-1:
    build:
      context: ./redis/sentinel
      dockerfile: sentinel.dockerfile
    links:
      - redis-master
  
  redis-sentinel-2:
    build:
      context: ./redis/sentinel
      dockerfile: sentinel.dockerfile
    links:
      - redis-master
  
  redis-sentinel-3:
    build:
      context: ./redis/sentinel
      dockerfile: sentinel.dockerfile
    links:
      - redis-master
