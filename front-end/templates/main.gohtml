{{template "base" .}}

{{define "content" }}
<div aria-live="polite" aria-atomic="true" class="position-relative">
  <div id="tabelogo-toast-container" class="toast-container top-0 end-0 p-3">

    {{/* <!-- put toasts within -->
    <div class="toast" id="tabelogo-toast" data-bs-autohide="false" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto">Tabelogo</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        <div class="row" >
            <div class="col-4">
                <div id="list-example" class="list-group">
                <a class="list-group-item list-group-item-action" href="#list-item-1">Result1</a>
                <a class="list-group-item list-group-item-action" href="#list-item-2">Item 2</a>
                <a class="list-group-item list-group-item-action" href="#list-item-3">Item 3</a>
                <a class="list-group-item list-group-item-action" href="#list-item-4">Item 4</a>
                </div>
            </div>
            <div class="col-8" style="height: 23vh; overflow:scroll;">
                <div data-bs-spy="scroll" data-bs-target="#list-example" data-bs-smooth-scroll="true" class="scrollspy-example text-center" tabindex="0">
                    // list
                    <div class="mb-2">
                        <h6 id="list-item-1">カラシビ味噌らー麺 鬼金棒 神田本店</h6>
                        <div class="row pb-1" style="font-size: 12px; font-weight: 400;">
                            <div class="col card-text">ラーメン</div>    
                            <div class="col card-text">丼</div>               
                        </div>
                        <div class="row pb-1" style="font-size: 12px; font-weight: 400;">
                            <div class="col card-text">"Rating": "3.73"(1569)</div>               
                        </div>
                        <div class="card-text " style="font-size: 12px;">03-6206-0239</div>
                        <div class="flex" style="font-size: 12px;">
                            <a href="https://tabelog.com/tokyo/A1310/A131002/13097205/" target=”_blank” style="font-size: 12px;">Tabelog</a>
                            <div id="photo" class="btn py-0 my-0" style="font-size: 12px;">Tabephoto</div>
                        </div>
                        // photo
                        // modal
                        <div class="modal fade" id="exampleModal1" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <img src="https://tblg.k-img.com/restaurant/images/Rvw/192621/320x320_rect_6587ab9a0c59fb5499cb1054399607ff.jpg" alt="..." >
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal fade" id="exampleModal2" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <img src="https://tblg.k-img.com/restaurant/images/Rvw/117269/320x320_rect_117269887.jpg" alt="..." >
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal fade" id="exampleModal3" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <img src="https://tblg.k-img.com/restaurant/images/Rvw/117265/320x320_rect_117265790.jpg" alt="..." >
                                    </div>
                                </div>
                            </div>
                        </div>
                        // modal
                        <div id="carouselExampleFade" class="carousel slide carousel-fade">
                            <div class="carousel-inner text-center" style="width:200px; height:130px; cursor: pointer;">
                                <div class="carousel-item active" data-bs-toggle="modal" data-bs-target="#exampleModal1">
                                    <img src="https://tblg.k-img.com/restaurant/images/Rvw/192621/320x320_rect_6587ab9a0c59fb5499cb1054399607ff.jpg" class="d-block w-100" alt="..." >
                                </div>
                                <div class="carousel-item" data-bs-toggle="modal" data-bs-target="#exampleModal2">
                                    <img src="https://tblg.k-img.com/restaurant/images/Rvw/117269/320x320_rect_117269887.jpg" class="d-block w-100" alt="..." >
                                </div>
                                <div class="carousel-item" data-bs-toggle="modal" data-bs-target="#exampleModal3">
                                    <img src="https://tblg.k-img.com/restaurant/images/Rvw/117265/320x320_rect_117265790.jpg" class="d-block w-100" alt="..." >
                                </div>
                            </div>
                            <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleFade" data-bs-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Previous</span>
                            </button>
                            <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleFade" data-bs-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Next</span>
                            </button>
                        </div>
                        // photo
                    </div>
                   
                    <h4 id="list-item-2">Item 2</h4>
                    <p>This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example copy here to emphasize the scrolling and highlighting.</p>
                    <h4 id="list-item-3">Item 3</h4>
                    <p>...</p>
                    <h4 id="list-item-4">Item 4</h4>
                    <p>...</p>
                </div>
            </div>
        </div>
      </div>
    </div> */}}

    {{/* <div class="toast" data-bs-autohide="false" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <img src="..." class="rounded me-2" alt="...">
        <strong class="me-auto">Bootstrap</strong>
        <small class="text-body-secondary">2 seconds ago</small>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        Heads up, toasts will stack automatically
      </div>
    </div> */}}
  </div>
</div>

{{/* offcanvas */}}
<div class="offcanvas offcanvas-start" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-1" id="offcanvasScrolling" aria-labelledby="offcanvasScrollingLabel" style="width: 41.66666667%;">
    {{/* offcanvas header */}}
    <div class="offcanvas-header" style="height:8vh;">
    {{/*  */}}
        <h5 class="offcanvas-title" id="offcanvasScrollingLabel">Advance Search</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    {{/* Search Panel and List search information Panel */}}
    <div class="offcanvas-body" style="height:92vh;">
        {{/* Advance Search */}}
        <ul class="list-group">
            <li class="list-group-item">
                <div id="advance-search" class="flex mt-2" style="display:;">
                    <div class="form-floating mb-3">
                        {{/* Search text */}}
                        <div class="form-floating mb-3">
                            <input id="textQuery-input" class="form-control" placeholder="Search area">
                            <label for="textQuery-input">Search area</label>
                        </div>
                        {{/* switches: operating, distance */}}
                        <div class="row mb-1">
                            <div class="input-group col">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" role="switch" id="openNow-bool" checked>
                                    <label class="form-check-label" for="openNow-bool" style="font-size:12px;">Operating</label>
                                </div>
                            </div>
                            <div class="input-group col">
                                <div class="form-check form-switch">
                                {{/* if rankPreference is selected, choose distance instead of relevence */}}
                                    <input class="form-check-input" type="checkbox" role="switch" id="rankPreference-bool" checked>
                                    <label class="form-check-label" for="rankPreference-bool" style="font-size:12px;">Revelence First</label>
                                </div>
                            </div>
                        </div>
                        {{/* rating range and search button */}}
                        <div class="row mb-1 align-items-center">
                            {{/* rating ranges */}}
                            <div class="input-group mb-3 col" style="display:block">
                                <label for="minRating-range" style="font-size:12px;">Min Rating</label>
                                <br>
                                <input type="range" id="minRating-range" name="minRating-range" min="0" max="4" value="3" step="1" list="tickmarks" style="width:200px;"/>
                                <datalist id="tickmarks" style="display: flex; justify-content: space-between;  width: 200px; font-size:12px;">
                                <option value="0" label="0"></option>
                                <option value="1" label="1"></option>
                                <option value="2" label="2"></option>
                                <option value="3" label="3"></option>
                                <option value="4" label="4"></option>
                                </datalist>
                            </div>
                            {{/* Advance Search Button */}}
                            <div class="col text-center align-middle" style="vertical-align: middle;">
                                <div id="AdvanceSearchBtn" class="btn btn-outline-secondary">Search</div>
                            </div>
                        </div>     
                    </div>
                    
                </div>
            </li>
            {{/* list information of serach results */}}
            <li id="list-search-results" class="list-group-item">
            
                
            </li>
        </ul>
    </div>
</div>
<div class="row">
    <div class="col-sm-5 col-10">
        <div class="row" id="userpanel">
            <div class="mt-2 ms-3 pe-5 ps-3">
                <ul class="list-group">
                    {{/* Quick Locate */}}
                    <li class="list-group-item pt-3 pb-2">
                        <div id="auto-complete-search" class="form-floating mb-3" >
                            <input id="quick-search-input" class="form-control" placeholder="Quick Locate">
                            <label for="quick-search-input" class="" >Quick Locate</label>
                        </div>
                        <button class="btn mb-1 btn-outline-secondary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasScrolling" aria-controls="offcanvasScrolling">Advance Search</button>
                    </li>
                    {{/* info */}}
                    <li class="list-group-item pt-2 pb-1">
                        
                        <div id="search-place-close-save" class="d-flex justify-content-end">
                            
                        </div>
                        
                        <div id="search-place-information" class="row" style="overflow: auto; max-height:330px;">
                            
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    {{/* Google Map */}}
    <div class="col-sm-7 col-12" style="padding-right:0; height:92vh;">
        <a id="MapInitBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Init Google Map</a>
        <div id="map" class="row" style="height:100%; width:100%;">
             
        </div>
    </div>
</div>
        
{{end}}

{{define "js"}}
    {{/* google map(restrict to use place(old), map only) */}}
    <script async
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBvexSf5aOR04wPtAnoq29dUwotprd-Igk&libraries=places&callback=initMap&region=JP&language=ja">
    </script>
    {{/* bootstrap */}}
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js" integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+" crossorigin="anonymous"></script>
    <script>

    {{/* Ｓervice link  */}}
    const brokerUrl = {{.BrokerURL}}
    const quickSearchLink = `${brokerUrl}/quick_search`
    const advanceSearchLink = `${brokerUrl}/advance_search`
    const tabelogoLink = `${brokerUrl}/tabelogo`
    const textAPIReturnAmount = 20

    // btn 
    const MapInitBtn = document.getElementById('MapInitBtn');
    {{/* const CurentPositionBtn = document.getElementById('CurrentPositionBtn'); */}}
    const GetTabelogInfoBtn = document.getElementById('GetTabelogInfoBtn');
    const AdvanceSearchBtn = document.getElementById('AdvanceSearchBtn');
    const CloseInfoBtn = document.getElementById('close-info-btn');

    // Input
    const AutoSearchBar = document.getElementById('quick-search-input');

    // Info
    const searchPlaceInformation = document.getElementById("search-place-information");
    const searchPlaceCloseSave = document.getElementById("search-place-close-save");
    const listSearchResults = document.getElementById("list-search-results");

    // toast
    const toastContainer = document.getElementById('tabelogo-toast-container')
    let toast;

    // backend
    const sent = document.getElementById('payload');
    const recevied = document.getElementById('received');

    // map
    let map;
    let marker;
    let autocompleteOptions;
    let currentPosition;
    let place; // for the detail of API return data
    const selectedPlace = {
        "TW": null,
    }
    const searchResults = {
        "TW": null,
    }
    const detailsAPIMask = ["id","international_phone_number","formatted_address","address_components","location","rating", "userRatingCount","googleMapsUri","websiteUri","regularOpeningHours","displayName","primaryType","photos","accessibilityOptions", "types"];
    const detailsAPIMaskNoAdvance = ["id","formatted_address","address_components","googleMapsUri","displayName","photos","accessibilityOptions"];
    const detailsAPIMaskForAddress = ["id","formatted_address","address_components","location","displayName"];
    const textAPIMask = ["id","internationalPhoneNumber","formattedAddress","addressComponents","location","rating", "userRatingCount","googleMapsUri","websiteUri","regularOpeningHours","displayName","primaryType","photos","accessibilityOptions", "types"];
    const textAPIMaskNoAdvance = ["id","formattedAddress","addressComponents","googleMapsUri","displayName","photos","accessibilityOptions"];
    const textAPIMaskForAddress = ["id","formattedAddress","addressComponents","location","displayName"];


    // Button Listener
    MapInitBtn.addEventListener("click", function(){
        map = new google.maps.Map(document.getElementById('map'), {
            center: {lat:23.553118, lng: 121.0211024}, // Taiwan for init
            zoom: 8,
        });
        goToCurrentPosition();
        marker = new google.maps.Marker({
            map,
        });
        MapInitBtn.style.display = "none";
        map.addListener("click", async (e)=>{
            console.log(e)
            Promise.allSettled([
                initSelectedPlace(selectedPlace, "TW", e.placeId, detailsAPIMask, "zh-TW", true)
            ]).then((value)=>{
                searchPlaceCloseSave.innerHTML = ""
                searchPlaceInformation.innerHTML = ""
                const listInfo = filterInfo(selectedPlace.TW)
                searchPlaceInformation.appendChild(generateInfoNode(listInfo))
                generateCloseSave(searchPlaceCloseSave, listInfo)
            })
        })
    });
    {{/* CurrentPositionBtn.addEventListener("click", goToCurrentPosition); */}}
    AdvanceSearchBtn.addEventListener("click", async function(){
        // clear searchResults
        searchResults.TW = null
        listSearchResults.innerHTML = ""
        const payload = {
            text_query: document.getElementById("textQuery-input").value,
            low_latitude: map.getBounds().eb.lo,
            low_longitude: map.getBounds().La.lo,
            high_latitude: map.getBounds().eb.hi,
            high_longitude: map.getBounds().La.hi,
            max_result_count: textAPIReturnAmount,
            min_rating: parseInt(document.getElementById("minRating-range").value),
            open_now: document.getElementById("openNow-bool").checked,
            rank_preference: (document.getElementById("rankPreference-bool").checked)?"RELEVANCE":"DISTANCE",
        }
        let payloadTW = {
            ...payload,
            language_code: "zh-TW",
        }
        Promise.allSettled([
            advancSearch(searchResults, "TW", textAPIMask, payloadTW),
        ])
        .then((value)=>{
           generateListInfoHTML(searchResults)
        })
    });

    // goToCurrentPostion()
    async function goToCurrentPosition(){
        navigator.geolocation.getCurrentPosition(function(position) {
            // store currentposition
            currentPosition = {
                lat: position.coords.latitude,
                lng: position.coords.longitude,
            };
            map.setCenter(currentPosition);
            map.setZoom(16)
            autocompleteOptions = {};
            const autocomplete = new google.maps.places.Autocomplete(AutoSearchBar, autocompleteOptions);
            autocomplete.addListener("place_changed", async function() {
                ClearQuickInfoAndSearchBar()
                place = autocomplete.getPlace();
                if (!place) {
                    searchPlaceInformation.innerHTML = "Place Not Found, please try it later..."
                } else {
                    Promise.allSettled([
                        initSelectedPlace(selectedPlace, "TW", place.place_id, detailsAPIMask, "zh-TW", true)
                    ]).then((value)=>{
                        searchPlaceCloseSave.innerHTML = ""
                        searchPlaceInformation.innerHTML = ""
                        const listInfo = filterInfo(selectedPlace.TW)
                        searchPlaceInformation.appendChild(generateInfoNode(listInfo))
                        generateCloseSave(searchPlaceCloseSave, listInfo)
                    })                    
                }
            })
        })
    }

    async function initSelectedPlace(obj, objParam, place_id, maskArray, language_code, needMark) {
        const headers = new Headers();
        headers.append("Content-Type", "application/json");
        payload = {
            place_id: place_id,
            api_mask: maskArray.join(","),
            language_code: language_code,
        }
        const body = {
            method: 'POST',
            body: JSON.stringify(payload),
            headers: headers,
        }
        await fetch(quickSearchLink, body)
        .then((response) => response.json())
        .then((data) => {
            if (!data.hasOwnProperty("error") && needMark) {
                markPlace(map, data.location.latitude, data.location.longitude)
            }
            obj[objParam] = data
        })
        .catch((error) => {
            console.log(error)
        });
    }

    async function advancSearch(obj, objParam, maskArray, payload){
        const headers = new Headers();
        headers.append("Content-Type", "application/json");
        let tmp = ""
        maskArray.forEach((i) => {tmp += "places."+ i + ","})
        tmp = tmp.slice(0, -1)
        payload = {
            ...payload,
            api_mask: tmp,
        }
        const body = {
            method: 'POST',
            body: JSON.stringify(payload),
            headers: headers,
        }
        await fetch(advanceSearchLink, body)
        .then((response)=>response.json())
        .then((data)=>{
            obj[objParam] = data
        })
        .catch((error)=>{
            console.log(error)
        })
    }

    // mark place on map, if marker is null, init a new marker
    function markPlace(map, lat, lng) {
        // map
        map.setCenter({lat: parseFloat(lat), lng: parseFloat(lng)});
        // marker
        marker.setPosition({lat: parseFloat(lat),lng: parseFloat(lng)});
    }

    // places:
    function generateCloseSave(ele, Info){
        const save = document.createElement('div');
        save.id = "save-place-btn";
        save.className = "btn py-1";
        save.innerHTML = "Save";
        save.addEventListener("click", function(){
            console.log("save")
        })
        const close = document.createElement('div');
        close.id = "close-info-btn";
        close.className = "btn py-1";
        close.innerHTML = "Close";
        close.addEventListener("click", ClearQuickInfoAndSearchBar)
        if (Info.types.includes("restaurant", "food", "bakery", "cafe")&&Info.country=="JP") {
            const tabelogo = document.createElement('div');
            tabelogo.id = `tabelogo-${Info.id}`;
            tabelogo.className = "btn py-1";
            tabelogo.innerHTML = "Tabelogo";
            // tabelog request
            var requestTabelogo = function(Info) {
                var request = async function() {
                    const headers = new Headers();
                    headers.append("Content-Type", "application/json");
                    const JApayload = {
                        place_id: Info.id,
                        api_mask: detailsAPIMaskForAddress.join(","),
                        language_code: "ja",
                    }
                    const body = {
                        method: 'POST',
                        body: JSON.stringify(JApayload),
                        headers: headers,
                    }
                    let response = await fetch(quickSearchLink, body)
                    let JPInfo = await response.json()
                    console.log(JPInfo)
                    const TBpayload = {
                        area: Info.administrative_area_level_1.toLowerCase(),
                        place_name: JPInfo.displayName.text,
                    }
                    let TabelogoResponse = await fetch(tabelogoLink, {
                        method: 'POST',
                        body: JSON.stringify(TBpayload),
                        headers: headers,
                    })
                    let TabelogoInfo = await TabelogoResponse.json()
                    console.log(TabelogoInfo)
                    const toast = generateTabelogoToast(Info.id, TabelogoInfo)
                    toastContainer.appendChild(toast) // add to toast container
                    const freshToast = document.getElementById(`toast-listener-${Info.id}`)
                    const toastBootstrap = bootstrap.Toast.getOrCreateInstance(freshToast)
                    toastBootstrap.show()
                }
                return request
            }
            tabelogf = requestTabelogo(Info)
            tabelogo.addEventListener("click", tabelogf)
            ele.appendChild(tabelogo)
        }
        ele.appendChild(save)
        ele.appendChild(close)
    }

    // return a flex with save and center button
    {{/* `
        <div class="d-flex justify-content-end">
            <div id="save-list-place-btn" class="btn py-1">Save</div>
            <div id="center-list-place-btn" class="btn py-1">Center</div>
        </div>
    ` */}}
    function generateCenterSave(Info){
        const flex = document.createElement('div');
        flex.className = "d-flex justify-content-end";
        const save = document.createElement('div');
        save.id = `save-${Info.id}`;
        save.className = "btn py-1";
        save.innerHTML = "Save";
        save.addEventListener("click", function(){
            console.log("save")
        })
        const center = document.createElement('div');
        center.id = `center-${Info.id}`;
        center.className = "btn py-1";
        center.innerHTML = "Center";
        var setMapCenterToLocate = function (map, lat, lng) {
            var center = function () {
                markPlace(map, lat, lng)
                map.setZoom(16)
            };
            return center;
        }
        centf = setMapCenterToLocate(map, Info.location.latitude, Info.location.longitude);
        center.addEventListener("click", centf)
        if (Info.types.includes("restaurant", "food", "bakery", "cafe")&&Info.country=="JP") {
            const tabelogo = document.createElement('div');
            tabelogo.id = `tabelogo-${Info.id}`;
            tabelogo.className = "btn py-1";
            tabelogo.innerHTML = "Tabelogo";
            // tabelog request
            var buildToast = function(Info, toast){
                
            }
            var requestTabelogo = function(Info, toastContainer, fn) {
                var request = async function() {
                    const headers = new Headers();
                    headers.append("Content-Type", "application/json");
                    const JApayload = {
                        place_id: Info.id,
                        api_mask: detailsAPIMaskForAddress.join(","),
                        language_code: "ja",
                    }
                    const body = {
                        method: 'POST',
                        body: JSON.stringify(JApayload),
                        headers: headers,
                    }
                    let response = await fetch(quickSearchLink, body)
                    let JPInfo = await response.json()
                    console.log(JPInfo)
                    const TBpayload = {
                        area: Info.administrative_area_level_1.toLowerCase(),
                        place_name: JPInfo.displayName.text,
                    }
                    let TabelogoResponse = await fetch(tabelogoLink, {
                        method: 'POST',
                        body: JSON.stringify(TBpayload),
                        headers: headers,
                    })
                    let TabelogoInfo = await TabelogoResponse.json()
                    console.log(TabelogoInfo)
                    console.log("start to generate toast")
                    const toast = generateTabelogoToast(Info.id, TabelogoInfo)
                    toastContainer.appendChild(toast) // add to toast container
                    const freshToast = document.getElementById(`toast-listener-${Info.id}`)
                    const toastBootstrap = bootstrap.Toast.getOrCreateInstance(freshToast)
                    toastBootstrap.show()
                }
                return request
            }

            tabelogf = requestTabelogo(Info, toastContainer, buildToast)
            tabelogo.addEventListener("click", tabelogf)
            flex.appendChild(tabelogo)
        }
        flex.appendChild(save)
        flex.appendChild(center)
        return flex
    }


    {{/* 
        <div class="row pb-1">
            <h5 class="card-title">${Info.TWdisplayName}</h5>
        </div>
        <div class="row pb-1" style="font-size: 14px; font-weight: 400;">
            <div class="col card-text">Rating: ${Info.rating} (${Info.userRatingCount})</div>               
        </div>
        <div class="col card-text" style="font-size: 14px; font-weight: 400;">${String(Info.primaryType).replace("_", " ").toUpperCase() || "No types to show..."}</div>
        <div class="card-text " style="font-size: 14px;">${Info.TWformattedAddress}</div>
        <div class="card-text " style="font-size: 14px;">${Info.internationalPhoneNumber}</div>
        <div class="flex py-2" style="font-size: 12px;">
            <a href="${Info.googleMapsUri}" style="font-size: 12px;" target=”_blank”>Google map</a>
            <a href="${Info.websiteUri}" style="font-size: 12px;" target=”_blank”>Website</a>`
        </div>
     */}}
    function generateInfoNode(Info) {
        const node = document.createElement('div');
        let HTML = `
                <div class="row pb-1">
                    <h5 class="card-title">${Info.TWdisplayName}</h5>
                </div>
        `
        if (Info.rating != null) {
            HTML += `
                <div class="row pb-1" style="font-size: 14px; font-weight: 400;">
                    <div class="col card-text">Rating: ${Info.rating} (${Info.userRatingCount})</div>               
                </div>
        `
        }
        if (Info.primaryType != null) {
            HTML += `<div class="col card-text" style="font-size: 14px; font-weight: 400;">${String(Info.primaryType).replace("_", " ").toUpperCase() || "No types to show..."}</div>`
        }
        if (Info.TWformattedAddress != null) {
            HTML += `<div class="card-text " style="font-size: 14px;">${Info.TWformattedAddress}</div>`
        }
        if (Info.internationalPhoneNumber != null){
            HTML += `<div class="card-text " style="font-size: 14px;">${Info.internationalPhoneNumber}</div>`
        }
        HTML += `
             <div class="flex py-2" style="font-size: 12px;">
                <a href="${Info.googleMapsUri}" style="font-size: 12px;" target=”_blank”>Google map</a>
        `
        if (Info.websiteUri != null) {
            HTML += `<a href="${Info.websiteUri}" style="font-size: 12px;" target=”_blank”>Website</a>`
        }
        HTML += `</div>`

        if (Info.TWweekdayDescriptions != null) {
            HTML += `<div style="font-size: 14px;">Open Time</div>`
            for (let i = 0; i < Info.TWweekdayDescriptions.length; i++) {
                HTML += `<div style="font-size: 14px;">${Info.TWweekdayDescriptions[i]}</div>`
            }
        }
        node.innerHTML = HTML
        return node
    }

    function generateListInfoHTML(data) {
        // let JPdata = JPTWdata.JP
        let TWdata = data.TW
        if (!TWdata || !TWdata.hasOwnProperty("places")) {
            return "NO DATA, please try again later..."
        }
        for (let i=0; i<TWdata.places.length; i++) {
            let listInfo = filterInfo(TWdata, i)
           // gcs
            listSearchResults.appendChild(generateCenterSave(listInfo))
            listnode = generateInfoNode(listInfo)
            listnode.innerHTML += `<hr>`
            listSearchResults.appendChild(listnode)
        }
    }

    function filterInfo(data, index) {
        const listInfo = {
            "id": null,
            "internationalPhoneNumber": null,
            "location": null,
            "country": null,
            "administrative_area_level_1": null,
            "TWdisplayName": null,
            "primaryType": null,
            "rating": null,
            "userRatingCount": null,
            "TWformattedAddress": null,
            "TWweekdayDescriptions": null,
            "accessibilityOptions": null,
            "googleMapsUri": null,
            "websiteUri": null,
            "photos": null,
            "types": null,
        }
        if (index!=null) {
            to = data.places[index]
        }
        else {
            to = data
        }
        if (to.hasOwnProperty("id")) {
            listInfo.id = to.id
        }
        if (to.hasOwnProperty("internationalPhoneNumber")) {
            listInfo.internationalPhoneNumber = to.internationalPhoneNumber
        }
        if (to.hasOwnProperty("addressComponents")) {
            to.addressComponents.forEach((ac) => {
                ac.types.forEach((t)=>{
                    if (t == "country") {
                        listInfo.country = ac.shortText
                    }
                    if (t == "administrative_area_level_1") {
                        listInfo.administrative_area_level_1 = ac.shortText
                    }
                })
            })
        }
        if (to.hasOwnProperty("location")) {
            listInfo.location = to.location
        }
        if (to.hasOwnProperty("displayName")) {
            listInfo.TWdisplayName = to.displayName.text
        }
        if (to.hasOwnProperty("primaryType")) {
            listInfo.primaryType = to.primaryType
        }
        if (to.hasOwnProperty("rating")) {
            listInfo.rating = to.rating
        }
        if (to.hasOwnProperty("userRatingCount")) {
            listInfo.userRatingCount = to.userRatingCount
        }
        if (to.hasOwnProperty("formattedAddress")) {
            listInfo.TWformattedAddress = to.formattedAddress
        }
        if (to.hasOwnProperty("regularOpeningHours")) {
            listInfo.TWweekdayDescriptions = to.regularOpeningHours.weekdayDescriptions
        }
        if (to.hasOwnProperty("accessibilityOptions")) {
            listInfo.accessibilityOptions = to.accessibilityOptions
        }
        if (to.hasOwnProperty("googleMapsUri")) {
            listInfo.googleMapsUri = to.googleMapsUri
        }
        if (to.hasOwnProperty("websiteUri")) {
            listInfo.websiteUri = to.websiteUri
        }
        if (to.hasOwnProperty("photos")){
            listInfo.photos = to.photos
        }
        if (to.hasOwnProperty("types")){
            listInfo.types = to.types
        }
        return listInfo
    }

    // clear info card, input's value and selectedPlace
    function ClearQuickInfoAndSearchBar(){
        searchPlaceInformation.innerHTML = ""
        AutoSearchBar.value = ""
        searchPlaceCloseSave.innerHTML = ""
    }

    function generateTabelogoToast(googleId, returnDataArr) {
        const toast = document.createElement('div');
        toast.className = "toast";
        toast.id = `toast-listener-${googleId}`;
        toast.dataset.bsAutohide = "false";
        toast.role = "alert";
        toast["aria-live"] = "assertive";
        toast["aria-atomic"] = "true";
        const toastHeader = document.createElement('div');
        toastHeader.className = "toast-header";
        toastHeader.innerHTML = `
                <strong class="me-auto">Tabelogo</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>`
        const toastBody = generateToastBody(googleId, returnDataArr)
        toast.appendChild(toastHeader)
        toast.appendChild(toastBody)
        return toast
    }

    function generateToastBody(googleId, returnDataArr) {
        // create toast body node
        const toastBody = document.createElement('div');
        toastBody.className = "toast-body";
        const row = document.createElement('div');
        row.className = "row";
        row.appendChild(generateToastSideList(googleId, returnDataArr))
        row.appendChild(generateToastMainList(googleId, returnDataArr))
        toastBody.appendChild(row)
        return toastBody
    }

    
    {{/* <div class="col-4">
        <div id="list-example" class="list-group">
        <a class="list-group-item list-group-item-action" href="#list-item-1">Result1</a>
        <a class="list-group-item list-group-item-action" href="#list-item-2">Item 2</a>
        <a class="list-group-item list-group-item-action" href="#list-item-3">Item 3</a>
        <a class="list-group-item list-group-item-action" href="#list-item-4">Item 4</a>
        </div>
    </div> */}}
    function generateToastSideList(googleId, returnDataArr) {
        const col = document.createElement('div');
        col.className = "col-4";
        let HTML=`
            <div id="list-${googleId}" class="list-group">`

        for (let i=0; i<returnDataArr.length; i++){
            HTML +=`<a class="list-group-item list-group-item-action" href="#list-item-${returnDataArr[i].Link}">Result-${i+1}</a>`
        }
        HTML += `</div>`
        col.innerHTML = HTML
        return col
    }

    {{/* <div class="col-8" style="height: 23vh; overflow:scroll;">
        <div data-bs-spy="scroll" data-bs-target="#list-example" data-bs-smooth-scroll="true" class="scrollspy-example text-center" tabindex="0">
            list...
        </div>
    </div> */}}
    function generateToastMainList(googleId, returnDataArr) {
        const col = document.createElement('div');
        col.className = "col-8";
        col.style = "height: 25vh; overflow:scroll;"
        const divc = document.createElement('div');
        divc.dataset.bsSpy = "scroll";
        divc.dataset.bsTarget = `#list-${googleId}`;
        divc.dataset.bsSmoothScroll = "true";
        divc.className = "scrollspy-example text-center";
        divc.tabIndex = "0";
        returnDataArr.forEach((data)=>{
            divc.appendChild(generateToastMainListInfo(data))
        })
        col.appendChild(divc)
        return col
    }

    function generateToastMainListInfo(data) {
        const list = document.createElement('div');
        // photo will be appendChild after id:photo-parent-${data.Link}
        let HTML = `
        <div id="photo-parent-${data.Link}" class="mb-2">
            <h6 id="list-item-${data.Link}">${data.Name}</h6>`
        if (data.hasOwnProperty("Type")) {
            HTML += `<div class="row pb-1" style="font-size: 12px; font-weight: 400;">`
            data.Type.forEach((type)=>{
                HTML += `<div class="col card-text">${type}</div>`
            })
            HTML += `</div>`
        }
        if (data.hasOwnProperty("Rating")) {
            HTML += `
            <div class="row pb-1" style="font-size: 12px; font-weight: 400;">
                <div class="col card-text">Rating: ${data.Rating}(${data.RatingCount})</div>               
            </div>`
        }
        if (data.hasOwnProperty("Phone")) {
            HTML += `<div class="card-text " style="font-size: 12px;">${data.Phone}</div>`
        }
        HTML +=`
            <div class="flex" style="font-size: 12px;">
                <a href="${data.Link}" target=”_blank” style="font-size: 12px;">Tabelog</a>
                <div data-Tabe-Link="${data.Link}" data-Tabe-Name="${data.Name}" class="btn py-0 my-0 tabelogo-photo-btn" style="font-size: 12px;">Tabephoto</div>
            </div>`
        HTML += `</div>`
        list.innerHTML = HTML
        return list
    }

    </script>
{{end}}
