// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: place.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createPlace = `-- name: CreatePlace :one
INSERT INTO places (
  google_id,
  tw_display_name,
  tw_formatted_address,
  tw_weekday_descriptions,
  administrative_area_level_1,
  country,
  google_map_uri,
  international_phone_number,
  lat,
  lng,
  primary_type,
  rating,
  types,
  user_rating_count,
  website_uri,
  place_version
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, 1
) RETURNING google_id, tw_display_name, jp_display_name, tw_formatted_address, tw_weekday_descriptions, administrative_area_level_1, country, google_map_uri, international_phone_number, lat, lng, primary_type, rating, types, user_rating_count, website_uri, place_version, created_at, updated_at
`

type CreatePlaceParams struct {
	GoogleID                 string   `json:"google_id"`
	TwDisplayName            string   `json:"tw_display_name"`
	TwFormattedAddress       string   `json:"tw_formatted_address"`
	TwWeekdayDescriptions    []string `json:"tw_weekday_descriptions"`
	AdministrativeAreaLevel1 string   `json:"administrative_area_level_1"`
	Country                  string   `json:"country"`
	GoogleMapUri             string   `json:"google_map_uri"`
	InternationalPhoneNumber string   `json:"international_phone_number"`
	Lat                      string   `json:"lat"`
	Lng                      string   `json:"lng"`
	PrimaryType              string   `json:"primary_type"`
	Rating                   string   `json:"rating"`
	Types                    []string `json:"types"`
	UserRatingCount          int32    `json:"user_rating_count"`
	WebsiteUri               string   `json:"website_uri"`
}

func (q *Queries) CreatePlace(ctx context.Context, arg CreatePlaceParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, createPlace,
		arg.GoogleID,
		arg.TwDisplayName,
		arg.TwFormattedAddress,
		pq.Array(arg.TwWeekdayDescriptions),
		arg.AdministrativeAreaLevel1,
		arg.Country,
		arg.GoogleMapUri,
		arg.InternationalPhoneNumber,
		arg.Lat,
		arg.Lng,
		arg.PrimaryType,
		arg.Rating,
		pq.Array(arg.Types),
		arg.UserRatingCount,
		arg.WebsiteUri,
	)
	var i Place
	err := row.Scan(
		&i.GoogleID,
		&i.TwDisplayName,
		&i.JpDisplayName,
		&i.TwFormattedAddress,
		pq.Array(&i.TwWeekdayDescriptions),
		&i.AdministrativeAreaLevel1,
		&i.Country,
		&i.GoogleMapUri,
		&i.InternationalPhoneNumber,
		&i.Lat,
		&i.Lng,
		&i.PrimaryType,
		&i.Rating,
		pq.Array(&i.Types),
		&i.UserRatingCount,
		&i.WebsiteUri,
		&i.PlaceVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlace = `-- name: DeletePlace :exec
DELETE FROM places
WHERE google_id = $1 AND place_version = $2
`

type DeletePlaceParams struct {
	GoogleID     string `json:"google_id"`
	PlaceVersion int32  `json:"place_version"`
}

func (q *Queries) DeletePlace(ctx context.Context, arg DeletePlaceParams) error {
	_, err := q.db.ExecContext(ctx, deletePlace, arg.GoogleID, arg.PlaceVersion)
	return err
}

const getPlaceByGoogleId = `-- name: GetPlaceByGoogleId :one
SELECT google_id, tw_display_name, jp_display_name, tw_formatted_address, tw_weekday_descriptions, administrative_area_level_1, country, google_map_uri, international_phone_number, lat, lng, primary_type, rating, types, user_rating_count, website_uri, place_version, created_at, updated_at FROM places
WHERE google_id = $1 LIMIT 1
`

func (q *Queries) GetPlaceByGoogleId(ctx context.Context, googleID string) (Place, error) {
	row := q.db.QueryRowContext(ctx, getPlaceByGoogleId, googleID)
	var i Place
	err := row.Scan(
		&i.GoogleID,
		&i.TwDisplayName,
		&i.JpDisplayName,
		&i.TwFormattedAddress,
		pq.Array(&i.TwWeekdayDescriptions),
		&i.AdministrativeAreaLevel1,
		&i.Country,
		&i.GoogleMapUri,
		&i.InternationalPhoneNumber,
		&i.Lat,
		&i.Lng,
		&i.PrimaryType,
		&i.Rating,
		pq.Array(&i.Types),
		&i.UserRatingCount,
		&i.WebsiteUri,
		&i.PlaceVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlace = `-- name: UpdatePlace :one
UPDATE places SET
    google_id = COALESCE($1, google_id),
    tw_display_name = COALESCE($2, tw_display_name),
    jp_display_name = COALESCE($3, jp_display_name),
    tw_formatted_address = COALESCE($4, tw_formatted_address),
    tw_weekday_descriptions = COALESCE($5, tw_weekday_descriptions),
    administrative_area_level_1 = COALESCE($6, administrative_area_level_1),
    country = COALESCE($7, country),
    google_map_uri = COALESCE($8, google_map_uri),
    international_phone_number = COALESCE($9, international_phone_number),
    lat = COALESCE($10, lat),
    lng = COALESCE($11, lng),
    primary_type = COALESCE($12, primary_type),
    rating = COALESCE($13, rating),
    types = COALESCE($14, types),
    user_rating_count = COALESCE($15, user_rating_count),
    website_uri = COALESCE($16, website_uri),
    place_version = (place_version + 1)
WHERE google_id = $1 AND place_version = $17
RETURNING google_id, tw_display_name, jp_display_name, tw_formatted_address, tw_weekday_descriptions, administrative_area_level_1, country, google_map_uri, international_phone_number, lat, lng, primary_type, rating, types, user_rating_count, website_uri, place_version, created_at, updated_at
`

type UpdatePlaceParams struct {
	GoogleID                 sql.NullString `json:"google_id"`
	TwDisplayName            sql.NullString `json:"tw_display_name"`
	JpDisplayName            sql.NullString `json:"jp_display_name"`
	TwFormattedAddress       sql.NullString `json:"tw_formatted_address"`
	TwWeekdayDescriptions    []string       `json:"tw_weekday_descriptions"`
	AdministrativeAreaLevel1 sql.NullString `json:"administrative_area_level_1"`
	Country                  sql.NullString `json:"country"`
	GoogleMapUri             sql.NullString `json:"google_map_uri"`
	InternationalPhoneNumber sql.NullString `json:"international_phone_number"`
	Lat                      sql.NullString `json:"lat"`
	Lng                      sql.NullString `json:"lng"`
	PrimaryType              sql.NullString `json:"primary_type"`
	Rating                   sql.NullString `json:"rating"`
	Types                    []string       `json:"types"`
	UserRatingCount          sql.NullInt32  `json:"user_rating_count"`
	WebsiteUri               sql.NullString `json:"website_uri"`
	PlaceVersion             int32          `json:"place_version"`
}

func (q *Queries) UpdatePlace(ctx context.Context, arg UpdatePlaceParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, updatePlace,
		arg.GoogleID,
		arg.TwDisplayName,
		arg.JpDisplayName,
		arg.TwFormattedAddress,
		pq.Array(arg.TwWeekdayDescriptions),
		arg.AdministrativeAreaLevel1,
		arg.Country,
		arg.GoogleMapUri,
		arg.InternationalPhoneNumber,
		arg.Lat,
		arg.Lng,
		arg.PrimaryType,
		arg.Rating,
		pq.Array(arg.Types),
		arg.UserRatingCount,
		arg.WebsiteUri,
		arg.PlaceVersion,
	)
	var i Place
	err := row.Scan(
		&i.GoogleID,
		&i.TwDisplayName,
		&i.JpDisplayName,
		&i.TwFormattedAddress,
		pq.Array(&i.TwWeekdayDescriptions),
		&i.AdministrativeAreaLevel1,
		&i.Country,
		&i.GoogleMapUri,
		&i.InternationalPhoneNumber,
		&i.Lat,
		&i.Lng,
		&i.PrimaryType,
		&i.Rating,
		pq.Array(&i.Types),
		&i.UserRatingCount,
		&i.WebsiteUri,
		&i.PlaceVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
