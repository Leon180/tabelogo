// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: favorite.sql

package db

import (
	"context"
)

const createFavorite = `-- name: CreateFavorite :one
INSERT INTO favorites (
    user_id,
    place_id
) VALUES (
    $1, 
    $2
) RETURNING favorite_id, user_id, place_id, created_at, updated_at
`

type CreateFavoriteParams struct {
	UserID  int64 `json:"user_id"`
	PlaceID int64 `json:"place_id"`
}

func (q *Queries) CreateFavorite(ctx context.Context, arg CreateFavoriteParams) (Favorite, error) {
	row := q.db.QueryRowContext(ctx, createFavorite, arg.UserID, arg.PlaceID)
	var i Favorite
	err := row.Scan(
		&i.FavoriteID,
		&i.UserID,
		&i.PlaceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFavorite = `-- name: GetFavorite :one
SELECT favorite_id, user_id, place_id, created_at, updated_at FROM favorites
WHERE user_id = $1 AND place_id = $2
`

type GetFavoriteParams struct {
	UserID  int64 `json:"user_id"`
	PlaceID int64 `json:"place_id"`
}

func (q *Queries) GetFavorite(ctx context.Context, arg GetFavoriteParams) (Favorite, error) {
	row := q.db.QueryRowContext(ctx, getFavorite, arg.UserID, arg.PlaceID)
	var i Favorite
	err := row.Scan(
		&i.FavoriteID,
		&i.UserID,
		&i.PlaceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFavorite = `-- name: ListFavorite :many
SELECT favorite_id, user_id, place_id, created_at, updated_at FROM favorites
WHERE user_id = $1
ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type ListFavoriteParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFavorite(ctx context.Context, arg ListFavoriteParams) ([]Favorite, error) {
	rows, err := q.db.QueryContext(ctx, listFavorite, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Favorite
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(
			&i.FavoriteID,
			&i.UserID,
			&i.PlaceID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFavorite = `-- name: RemoveFavorite :exec
DELETE FROM favorites
WHERE user_id = $1 AND place_id = $2
`

type RemoveFavoriteParams struct {
	UserID  int64 `json:"user_id"`
	PlaceID int64 `json:"place_id"`
}

func (q *Queries) RemoveFavorite(ctx context.Context, arg RemoveFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, removeFavorite, arg.UserID, arg.PlaceID)
	return err
}
