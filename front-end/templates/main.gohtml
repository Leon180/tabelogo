{{template "base" .}}

{{define "content" }}
<div aria-live="polite" aria-atomic="true" class="position-relative">
  <div id="tabelogo-toast-container" class="toast-container top-0 end-0 p-3">

  </div>
</div>

{{/* offcanvas */}}
<div class="offcanvas offcanvas-start" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-1" id="offcanvasScrolling" aria-labelledby="offcanvasScrollingLabel" style="width: 41.66666667%;">
    {{/* offcanvas header */}}
    <div class="offcanvas-header" style="height:8vh;">
    {{/*  */}}
        <h5 class="offcanvas-title" id="offcanvasScrollingLabel">Advance Search</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    {{/* Search Panel and List search information Panel */}}
    <div class="offcanvas-body" style="height:92vh;">
        {{/* Advance Search */}}
        <ul class="list-group">
            <li class="list-group-item">
                <div id="advance-search" class="flex mt-2" style="display:;">
                    <div class="form-floating mb-3">
                        {{/* Search text */}}
                        <div class="form-floating mb-3">
                            <input id="textQuery-input" class="form-control" placeholder="Search">
                            <label for="textQuery-input">Search</label>
                        </div>
                        {{/* switches: operating, distance */}}
                        <div class="row mb-1">
                            <div class="input-group col">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" role="switch" id="openNow-bool" checked>
                                    <label class="form-check-label" for="openNow-bool" style="font-size:12px;">Operating</label>
                                </div>
                            </div>
                            <div class="input-group col">
                                <div class="form-check form-switch">
                                {{/* if rankPreference is selected, choose distance instead of relevence */}}
                                    <input class="form-check-input" type="checkbox" role="switch" id="rankPreference-bool" checked>
                                    <label class="form-check-label" for="rankPreference-bool" style="font-size:12px;">Revelence First</label>
                                </div>
                            </div>
                        </div>
                        {{/* rating range and search button */}}
                        <div class="row mb-1 align-items-center">
                            {{/* rating ranges */}}
                            <div class="input-group mb-3 col" style="display:block">
                                <label for="minRating-range" style="font-size:12px;">Min Rating</label>
                                <br>
                                <input type="range" id="minRating-range" name="minRating-range" min="0" max="4" value="3" step="1" list="tickmarks" style="width:200px;"/>
                                <datalist id="tickmarks" style="display: flex; justify-content: space-between;  width: 200px; font-size:12px;">
                                <option value="0" label="0"></option>
                                <option value="1" label="1"></option>
                                <option value="2" label="2"></option>
                                <option value="3" label="3"></option>
                                <option value="4" label="4"></option>
                                </datalist>
                            </div>
                            {{/* Advance Search Button */}}
                            <div class="col text-center align-middle" style="vertical-align: middle;">
                                <div id="AdvanceSearchBtn" class="d-inline-block" style="cursor:pointer;" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Search">
                                    <i class="fa-solid fa-magnifying-glass"></i>
                                </div>
                            </div>
                            <div class="col text-center align-middle" style="vertical-align: middle;" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Go to current position">
                                <div class="go-to-current" style="cursor:pointer;">
                                    <i class="fa-solid fa-location-dot"></i>
                                </div>
                            </div>
                        </div>     
                    </div>
                    
                </div>
            </li>
            
            {{/* offcanvas Mark Place */}}
            <li id="offcanvas-mark-container" class="list-group-item d-none">
            <div id="offcanvas-mark-place-place-close-save" class="d-flex justify-content-end">

            </div>
            <div id="offcanvas-mark-place-information">
            
            </div>
            {{/* show ingo */}}
            </li>
            {{/* list information of serach results */}}
            <li id="list-search-results" class="list-group-item d-none">
            
                
            </li>
        </ul>
    </div>
</div>
<div class="row">
    <div class="col-sm-5 col-10">
        <div class="row" id="userpanel">
            <div class="mt-2 ms-3 pe-5 ps-3">
                <ul class="list-group">
                    {{/* Quick Locate */}}
                    <li class="list-group-item pt-3 pb-2">
                        <div id="auto-complete-search" class="form-floating mb-3" >
                            <input id="quick-search-input" class="form-control" placeholder="Quick Search">
                            <label for="quick-search-input" class="">Quick Search</label>
                        </div>
                        <div class="d-flex justify-content-around align-items-center">
                            <button class="btn mb-1 btn-outline-secondary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasScrolling" aria-controls="offcanvasScrolling">Advance Search</button>
                            <div id="show-favorite-btn" class="" style="vertical-align: middle;" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Show favorites">
                                <div class="" style="cursor:pointer;">
                                    <i class="fa-solid fa-bookmark"></i>
                                </div>
                            </div>
                            <div class="" style="vertical-align: middle;" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Go to current position">
                                <div class="go-to-current" style="cursor:pointer;">
                                    <i class="fa-solid fa-location-dot"></i>
                                </div>
                            </div>
                        </div>
                    </li>
                    {{/* info */}}
                    <li class="list-group-item" style="overflow: auto; max-height:66vh;">
                        <div id="search-place-container" class="pt-2 pb-1 d-none">
                        
                            <div id="search-place-close-save" class="d-flex justify-content-end">
                                
                            </div>
                            
                            <div id="search-place-information" class="row">
                                
                            </div>

                            <hr>
                        </div>
                        <div id="favorite-list" class="pt-2 pb-1 d-none">

                        </div>
                    </li>
                    
                </ul>
            </div>
        </div>
    </div>
    {{/* Google Map */}}
    <div class="col-sm-7 col-12" style="padding-right:0; height:92vh;">
        <div id="map-loading" class="row justify-content-center align-items-center d-none" style="height:100%; width:100%; background-color:gray;">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <div id="map" class="row" style="height:100%; width:100%;">
             
        </div>
    </div>
</div>
        
{{end}}

{{define "js"}}
    
    {{/* bootstrap */}}
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js" integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+" crossorigin="anonymous"></script>
    {{/* font-awesome */}}
    <script src="https://kit.fontawesome.com/aba0975594.js" crossorigin="anonymous"></script>
    <script>
        {{/* ï¼³ervice link  */}}
        const brokerUrl = {{.BrokerURL}}
        const quickSearchLink = `${brokerUrl}/quick_search`
        const advanceSearchLink = `${brokerUrl}/advance_search`
        const tabelogoLink = `${brokerUrl}/tabelogo`
        const tabeLogoImgLink = `${brokerUrl}/tabephoto`
        const textAPIReturnAmount = 20

        // btn 
        const GetTabelogInfoBtn = document.getElementById('GetTabelogInfoBtn');
        const AdvanceSearchBtn = document.getElementById('AdvanceSearchBtn');
        const CloseInfoBtn = document.getElementById('close-info-btn');
        const ShowFavoriteBtn = document.getElementById('show-favorite-btn');

        // Input
        const AutoSearchBar = document.getElementById('quick-search-input');

        // Info
        const searchPlaceContainer = document.getElementById("search-place-container");
        const searchPlaceInformation = document.getElementById("search-place-information");
        const searchPlaceCloseSave = document.getElementById("search-place-close-save");
        const listSearchResults = document.getElementById("list-search-results");
        const offcanvasMarkContainer = document.getElementById("offcanvas-mark-container")
        const offcanvasMarkPlaceInformation = document.getElementById("offcanvas-mark-place-information");
        const offcanvasMarkPlaceCloseSave = document.getElementById("offcanvas-mark-place-place-close-save")
        const bsOffcanvas = new bootstrap.Offcanvas('#offcanvasScrolling')
        const userPannel = document.getElementById("userpanel")
        const favoriteListContainer = document.getElementById("favorite-list")
        
        // favorite
        let favMethod = "get_favs";
        let favCountry;
        let favRegion;

        // toast
        const toastContainer = document.getElementById('tabelogo-toast-container')
        let toast;

        // map
        let map;
        const mapLoading = document.getElementById("map-loading")
        const mapContainer = document.getElementById("map")
        let marker;
        let infoWindow;
        let favoriteInfoWindows = [];
        let infoWindows = [];
        let favoriteMarkers = [];
        let markers = [];
        let goToCurrentIcon;
        
        let autocompleteOptions;
        let currentPosition;
        let place; // for the detail of API return data
        const selectedPlace = {
            "TW": null,
        }
        const searchResults = {
            "TW": null,
        }
        const detailsAPIMask = ["id","international_phone_number","formatted_address","address_components","location","rating", "userRatingCount","googleMapsUri","websiteUri","regularOpeningHours","displayName","primaryType","photos","accessibilityOptions", "types"];
        const detailsAPIMaskNoAdvance = ["id","formatted_address","address_components","googleMapsUri","displayName","photos","accessibilityOptions"];
        const detailsAPIMaskForAddress = ["id","formatted_address","address_components","location","displayName"];
        const textAPIMask = ["id","internationalPhoneNumber","formattedAddress","addressComponents","location","rating", "userRatingCount","googleMapsUri","websiteUri","regularOpeningHours","displayName","primaryType","photos","accessibilityOptions", "types"];
        const textAPIMaskNoAdvance = ["id","formattedAddress","addressComponents","googleMapsUri","displayName","photos","accessibilityOptions"];
        const textAPIMaskForAddress = ["id","formattedAddress","addressComponents","location","displayName"];
    </script>
    <script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBvexSf5aOR04wPtAnoq29dUwotprd-Igk&libraries=places&region=JP&language=ja">
    </script>
    <script>

    async function initMap(){
        // generate map and center to Taiwan
        userPannel.classList.add("d-none")
        mapContainer.classList.add("d-none")
        mapLoading.classList.remove("d-none")
        map = new google.maps.Map(document.getElementById('map'), {
            center: {lat:23.553118, lng: 121.0211024}, // Taiwan for init
            zoom: 8,
        });
        // go to current position
        try {
            await goToCurrentPosition();
        } catch (error) {
            console.log(error)
        }
        goToCurrentIcon = document.getElementsByClassName("go-to-current")
        for (let i=0; i<goToCurrentIcon.length; i++) {
            goToCurrentIcon[i].addEventListener("click", function(){
                setMapToCurrentPosition()
            })
        }
        // init marker
        marker = new google.maps.Marker({
            map,
        });
        mapContainer.classList.remove("d-none")
        mapLoading.classList.add("d-none")
        userPannel.classList.remove("d-none")
        // init map's event listener(while click on map, show info card and mark place)
        map.addListener("click", async (e)=>{
            // cancel the default marker and infoWindow
            e.stop()
            if(!e.placeId){
                return
            }
            selectedInfoLoading()
            Promise.allSettled([
                initSelectedPlace(selectedPlace, "TW", e.placeId, detailsAPIMask, "zh-TW", true)
            ]).then((value)=>{
                // error handling
                if (selectedPlace.TW.hasOwnProperty("error")) {
                    alert(`We meet some problem, please try again later...
                        error: ${selectedPlace.TW.error}
                    `)
                    return
                }
                const listInfo = selectedPlace.TW
                selectedInfoShow(listInfo)
                
            })
            .catch((error)=>{
                console.log(error)
            })
        })   
    }
    initMap();

    // tool tip init
    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

    AdvanceSearchBtn.addEventListener("click", async function(){
        if (document.getElementById("textQuery-input").value=="") {
            alert("Please input text in search bar")
            return
        }
        // request advance search
        const payload = {
            text_query: document.getElementById("textQuery-input").value,
            low_latitude: map.getBounds().eb.lo,
            low_longitude: map.getBounds().La.lo,
            high_latitude: map.getBounds().eb.hi,
            high_longitude: map.getBounds().La.hi,
            max_result_count: textAPIReturnAmount,
            min_rating: parseInt(document.getElementById("minRating-range").value),
            open_now: document.getElementById("openNow-bool").checked,
            rank_preference: (document.getElementById("rankPreference-bool").checked)?"RELEVANCE":"DISTANCE",
        }
        let payloadTW = {
            ...payload,
            language_code: "zh-TW",
        }
        // clear searchResults
        searchResults.TW = null
        // show loading
        generateListInfoLoading()
        Promise.allSettled([
            advanceSearch(searchResults, "TW", textAPIMask, payloadTW),
        ])
        .then((value)=>{
            // clear markers and infoWindows
            markers.forEach((m)=>{
                m.setMap(null)
            })
            markers = []
            infoWindows.forEach((iw)=>{
                iw.close()
            })
            infoWindows = []
            // error handling
            if (searchResults.TW.hasOwnProperty("error")) {
                alert(`We meet some problem, please try again later...
                    error: ${searchResults.TW.error}
                `)
                listSearchResults.classList.add("d-none")
                return
            }
            // generate new markers and infoWindows
            generateListInfoHTML(searchResults.TW)
            generateMarkers(map, searchResults.TW)
        })
        .catch((error)=>{
            console.log(error)
        })
    });

    // mark place on map, if marker is null, init a new marker
    function markPlace(map, lat, lng) {
        // map
        map.setCenter({lat: parseFloat(lat), lng: parseFloat(lng)});
        // marker
        marker.setMap(map);
        marker.setPosition({lat: parseFloat(lat),lng: parseFloat(lng)});
    }

    // input: map and searchResult(TW or JP or others...)
    function generateMarkers(map, serachResult){
        for (let i=0; i<serachResult.places.length; i++) {
            let listInfo = filterInfo(serachResult, i)
            const marker = new google.maps.Marker({
                position: {lat: listInfo.location.latitude, lng: listInfo.location.longitude},
                map: map
            });
            // save the marker in array, to clear it later
            markers.push(marker)
            // infoWindow for label name
            const contentString =
            `<a onclick="offCanvasOpen()" href="#advance-result-${listInfo.id}">${listInfo.TwDisplayName}</a>`
            const infoWindow = new google.maps.InfoWindow({
                content: contentString,
            });
            infoWindow.setPosition({lat: listInfo.location.latitude, lng: listInfo.location.longitude})
            infoWindow.setOptions({
                disableAutoPan : true, // disable auto pan
                pixelOffset: new google.maps.Size(0, 40) // set the infoWindow position to the marker
            })
            // save the infoWindow in array, to close it later
            infoWindows.push(infoWindow)
            infoWindow.open({map, marker});
        }
    }

    function setMapToCurrentPosition() {
        mapContainer.classList.add("d-none")
        mapLoading.classList.remove("d-none")
        navigator.geolocation.getCurrentPosition(function(position) {
            // store currentposition
            currentPosition = {
                lat: position.coords.latitude,
                lng: position.coords.longitude,
            };
            map.setCenter(currentPosition);
            map.setZoom(16)
            mapContainer.classList.remove("d-none")
            mapLoading.classList.add("d-none")
        })
        
    }

    // goToCurrentPostion()
    async function goToCurrentPosition(){
        navigator.geolocation.getCurrentPosition(function(position) {
            // store currentposition
            currentPosition = {
                lat: position.coords.latitude,
                lng: position.coords.longitude,
            };
            map.setCenter(currentPosition);
            map.setZoom(16)
            autocompleteOptions = {};
            const autocomplete = new google.maps.places.Autocomplete(AutoSearchBar, autocompleteOptions);
            autocomplete.addListener("place_changed", async function() {
                ClearQuickInfoAndSearchBar()
                place = autocomplete.getPlace();
                if (!place) {
                    searchPlaceInformation.innerHTML = "Place Not Found, please try it later..."
                } else {
                    selectedInfoLoading()
                    Promise.allSettled([
                        initSelectedPlace(selectedPlace, "TW", place.place_id, detailsAPIMask, "zh-TW", true)
                    ]).then((value)=>{
                        // error handling
                        if (selectedPlace.TW.hasOwnProperty("error")) {
                            alert(`We meet some problem, please try again later...
                                error: ${selectedPlace.TW.error}
                            `)
                            return
                        }
                        const listInfo = selectedPlace.TW
                        selectedInfoShow(listInfo)
                    })                    
                }
            })
        }, function() {
            alert("Please allow us to use your location")
        });
    }

    async function initSelectedPlace(obj, objParam, place_id, maskArray, language_code, needMark) {
        const headers = new Headers();
        headers.append("Content-Type", "application/json");
        payload = {
            place_id: place_id,
            api_mask: maskArray.join(","),
            language_code: language_code,
        }
        const body = {
            method: 'POST',
            body: JSON.stringify(payload),
            headers: headers,
        }
        try {
            let response = await fetch(quickSearchLink, body)
            let resjson = await response.json()
            let data = resjson.result
            if (resjson.source=="google") {
                if (!data.hasOwnProperty("error") && needMark) {
                    markPlace(map, data.location.latitude, data.location.longitude)
                    obj[objParam] = filterInfo(data)
                } else if (data.hasOwnProperty("error")) {
                    obj[objParam] = {
                        "error": data.error,
                    }
                }
            } else if (resjson.source=="redis"){
                if (needMark) {
                    markPlace(map, data.lat, data.lng)
                    obj[objParam] = filterInfoRedis(data)
                }
            }
        } catch (error) {
            console.log(error)
        }
    }

    function offCanvasOpen() {
        bsOffcanvas.show()
    }

    function selectedInfoShow(listInfo) {
        if (document.getElementById("offcanvasScrolling").classList.contains("show")) {
            offcanvasMarkPlaceCloseSave.innerHTML = ""
            offcanvasMarkPlaceInformation.innerHTML = ""
            offcanvasMarkPlaceInformation.appendChild(generateInfoNode(listInfo))
            generateInfoButton(offcanvasMarkPlaceCloseSave, listInfo, ClearOffcanvasInfo, "offcanvas-selected")
            offcanvasMarkContainer.classList.remove("d-none")
            offcanvasMarkPlaceCloseSave.scrollIntoView({behavior: "smooth"})
        } else {
            searchPlaceCloseSave.innerHTML = ""
            searchPlaceInformation.innerHTML = ""
            searchPlaceInformation.appendChild(generateInfoNode(listInfo))
            generateInfoButton(searchPlaceCloseSave, listInfo, ClearQuickInfoAndSearchBar, "selected")
            searchPlaceContainer.classList.remove("d-none")
            searchPlaceCloseSave.scrollIntoView({behavior: "smooth"})
        }
    }

    function selectedInfoLoading(){
        if (document.getElementById("offcanvasScrolling").classList.contains("show")) {
            offcanvasMarkPlaceCloseSave.innerHTML = ""
            offcanvasMarkPlaceInformation.innerHTML = ""
            offcanvasMarkPlaceInformation.innerHTML = `
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `
            offcanvasMarkContainer.classList.remove("d-none")
            offcanvasMarkPlaceCloseSave.scrollIntoView({behavior: "smooth"})
        } else {
            searchPlaceCloseSave.innerHTML = ""
            searchPlaceInformation.innerHTML = ""
            searchPlaceInformation.innerHTML = `
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `
            searchPlaceContainer.classList.remove("d-none")
        }
    }

    async function advanceSearch(obj, objParam, maskArray, payload){
        const headers = new Headers();
        headers.append("Content-Type", "application/json");
        let tmp = ""
        maskArray.forEach((i) => {tmp += "places."+ i + ","})
        tmp = tmp.slice(0, -1)
        payload = {
            ...payload,
            api_mask: tmp,
        }
        const body = {
            method: 'POST',
            body: JSON.stringify(payload),
            headers: headers,
        }
        try {
            let response = await fetch(advanceSearchLink, body)
            let data = await response.json()
            obj[objParam] = data
        } catch (error) {
            console.log(error)
        }
    }

    // if ele is null, generate a new div, else directly append to ele
    // if closeFn is null, don't generate close button
    async function generateInfoButton(ele, Info, closeFn, keyword){
        const flex = document.createElement('div');
        flex.id=`${keyword}-${Info.id}`
        flex.className = "d-flex justify-content-end";
        // save
        const save = document.createElement('div');
        save.className = "btn py-1";
        // check and update favorite(if user login)
        const headers = new Headers();
        headers.append("Content-Type", "application/json");
        headers.append("Authorization", `Bearer ${localStorage.getItem("tabelogo_token")}`);
        const saveParam = {
            ...Info,
        }
        // save param for backend
        saveParam.google_id = saveParam.id
        delete saveParam.id
        saveParam.tw_display_name = saveParam.TwDisplayName
        delete saveParam.TwDisplayName
        saveParam.tw_formatted_address = saveParam.TwFormattedAddress
        delete saveParam.TwFormattedAddress
        saveParam.tw_weekday_descriptions = saveParam.TwWeekdayDescriptions
        delete saveParam.TwWeekdayDescriptions
        saveParam.international_phone_number = saveParam.internationalPhoneNumber
        delete saveParam.internationalPhoneNumber
        saveParam.google_map_uri = saveParam.googleMapsUri
        delete saveParam.googleMapsUri
        saveParam.website_uri = saveParam.websiteUri
        delete saveParam.websiteUri
        saveParam.primary_type = saveParam.primaryType
        delete saveParam.primaryType
        saveParam.user_rating_count = saveParam.userRatingCount
        delete saveParam.userRatingCount
        saveParam.lat = saveParam.location.latitude.toString()
        saveParam.lng = saveParam.location.longitude.toString()
        saveParam.rating = saveParam.rating.toString()
        console.log("generateInfobutton's saveparam", saveParam)
        const body = {
            method: 'POST',
            body: JSON.stringify(saveParam),
            headers: headers,
        }
        try {
            let response = await fetch(`${brokerUrl}/check_update_fav`, body)
            let responseJSON = await response.json()
            // if user not login, or error
            if (responseJSON.hasOwnProperty("error")) {
                save.innerHTML = `<i class="fa-regular fa-bookmark"></i>`
            } else {
                if (responseJSON.isFavorite == true) {
                    save.innerHTML = `<i class="fa-solid fa-bookmark"></i>`;
                } else {
                    save.innerHTML = `<i class="fa-regular fa-bookmark"></i>`
                }
            }
        } catch (error) {
            console.log(error)
        }
        
        // save button listener
        const savePlace = function (ele, info) {
            const savePlaceToFavorite = async function () {
                try {
                    await refreshToken()
                    const headers = new Headers();
                    headers.append("Content-Type", "application/json");
                    headers.append("Authorization", `Bearer ${localStorage.getItem("tabelogo_token")}`);
                    const body = {
                        method: 'POST',
                        body: JSON.stringify(info),
                        headers: headers,
                    }
                    fetch(`${brokerUrl}/favorite`, body)
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.error!=null) {
                            save.innerHTML = `<i class="fa-regular fa-bookmark"></i>`
                        } else {
                            if (data.action == "add") {
                                save.innerHTML = `<i class="fa-solid fa-bookmark"></i>`
                            }  else {
                                save.innerHTML = `<i class="fa-regular fa-bookmark"></i>`
                            }
                        }
                    })
                } catch (error) {
                    console.log(error)
                }
            };
            return savePlaceToFavorite;
        }
        sp = savePlace(save, saveParam)
        save.addEventListener("click", sp)
        // close
        const close = document.createElement('div');
        close.className = "btn py-1";
        close.innerHTML = `<i class="fa-solid fa-xmark"></i>`;
        close.addEventListener("click", closeFn)
        const center = document.createElement('div');
        center.className = "btn py-1";
        center.innerHTML = `<i class="fa-solid fa-location-dot"></i>`;
        var setMapCenterToLocate = function (map, lat, lng) {
            var center = function () {
                markPlace(map, lat, lng)
                map.setZoom(16)
            };
            return center;
        }
        centf = setMapCenterToLocate(map, Info.location.latitude, Info.location.longitude);
        center.addEventListener("click", centf)
        // tabelogo
        if (Info.types.includes("restaurant", "ramen_restaurant", "food", "bakery", "cafe")&&Info.country=="JP") {
            const tabelogo = document.createElement('div');
            tabelogo.className = "btn py-1";
            tabelogo.innerHTML = "Tabelogo";
            // tabelog request
            var requestTabelogo = function(Info) {
                var request = async function() {
                    const headers = new Headers();
                    headers.append("Content-Type", "application/json");
                    const JApayload = {
                        place_id: Info.id,
                        api_mask: detailsAPIMaskForAddress.join(","),
                        language_code: "ja",
                    }
                    const body = {
                        method: 'POST',
                        body: JSON.stringify(JApayload),
                        headers: headers,
                    }
                    try {
                        let response = await fetch(quickSearchLink, body)
                        let resjson = await response.json()
                        let data = resjson.result
                        console.log(resjson.source, data)
                        let google_id
                        let place_name
                        if (resjson.source=="google") {
                            google_id = data.id
                            place_name = data.displayName.text
                        } else if (resjson.source=="redis"){
                            google_id = data.google_id
                            place_name = data.jp_display_name
                        }
                        const TBpayload = {
                            google_id: google_id,
                            area: Info.administrative_area_level_1.toLowerCase(),
                            place_name: place_name,
                        }
                        let TabelogoResponse = await fetch(tabelogoLink, {
                            method: 'POST',
                            body: JSON.stringify(TBpayload),
                            headers: headers,
                        })
                        let TabelogoInfo = await TabelogoResponse.json()
                        const toast = generateTabelogoToast(Info.id, Info.TwDisplayName, TabelogoInfo)
                        toastContainer.appendChild(toast) // add to toast container
                        const freshToast = document.getElementById(`toast-listener-${Info.id}`)
                        const toastBootstrap = bootstrap.Toast.getOrCreateInstance(freshToast)
                        toastBootstrap.show()
                        generateTabelogoImage()
                    } catch (error) {
                        console.log(error)
                    }
                }
                return request
            }
            tabelogf = requestTabelogo(Info)
            tabelogo.addEventListener("click", tabelogf)
            if (ele!=null) {
                ele.appendChild(tabelogo)
            } else {
                flex.appendChild(tabelogo)
            }
        }
        if (ele!=null) {
            ele.appendChild(center)
            ele.appendChild(save)
            if (closeFn!=null) {
                ele.appendChild(close)
            }
        } else {
            flex.appendChild(center)
            flex.appendChild(save)
            if (closeFn!=null) {
                flex.appendChild(close)
            }
            return flex
        }
    }

    function generateInfoNode(Info) {
        const node = document.createElement('div');
        let HTML = `
                <div class="row pb-1">
                    <h5 class="card-title">${Info.TwDisplayName}</h5>
                </div>
        `
        
        HTML += `
                <div class="row pb-1" style="font-size: 14px; font-weight: 400;">
                    <div class="col card-text">Rating: ${Info.rating} (${Info.userRatingCount})</div>               
                </div>
        `

        if (Info.primaryType != "") {
            HTML += `<div class="col card-text" style="font-size: 14px; font-weight: 400;">${String(Info.primaryType).replace("_", " ").toUpperCase() || "No types to show..."}</div>`
        }
        if (Info.TwFormattedAddress != "") {
            HTML += `<div class="card-text " style="font-size: 14px;">${Info.TwFormattedAddress}</div>`
        }
        if (Info.internationalPhoneNumber != ""){
            HTML += `<div class="card-text " style="font-size: 14px;">${Info.internationalPhoneNumber}</div>`
        }
        HTML += `
             <div class="flex py-2" style="font-size: 12px;">
                <a href="${Info.googleMapsUri}" style="font-size: 12px;" target=â_blankâ>Google map</a>
        `
        if (Info.websiteUri != "") {
            HTML += `<a href="${Info.websiteUri}" style="font-size: 12px;" target=â_blankâ>Website</a>`
        }
        HTML += `</div>`

        if (Info.TwWeekdayDescriptions.length > 0) {
            HTML += `<div style="font-size: 14px;">Open Time</div>`
            for (let i = 0; i < Info.TwWeekdayDescriptions.length; i++) {
                HTML += `<div style="font-size: 14px;">${Info.TwWeekdayDescriptions[i]}</div>`
            }
        }
        node.innerHTML = HTML
        return node
    }

    async function generateListInfoHTML(data) {
        listSearchResults.innerHTML = ""
        // let JPdata = JPTWdata.JP
        if (!data || data.hasOwnProperty("error")) {
            alert(`We meet some problem, please try again later...
                error: ${data.error}
            `)
            return
        }
        for (let i=0; i<data.places.length; i++) {
            try {
                let listInfo = filterInfo(data, i)
                const centerSaveTabe = await generateInfoButton(null, listInfo, null, "advance-result")
                {{/* const centerSaveTabe = await generateCenterSave(listInfo) */}}
                listSearchResults.appendChild(centerSaveTabe)
                listnode = generateInfoNode(listInfo)
                listnode.innerHTML += `<hr>`
                listSearchResults.appendChild(listnode)
            } catch (error) {
                console.log(error)
            }
        }
    }

    function generateListInfoLoading() {
        listSearchResults.innerHTML = ""
        listSearchResults.innerHTML = `
            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        `
        listSearchResults.classList.remove("d-none")
    }

    function filterInfo(data, index) {
        const listInfo = {
            "id": "",
            "internationalPhoneNumber": "",
            "location": null,
            "country": "",
            "administrative_area_level_1": "",
            "TwDisplayName": "",
            "primaryType": "",
            "rating": 0.0,
            "userRatingCount": 0,
            "TwFormattedAddress": "",
            "TwWeekdayDescriptions": [],
            "accessibilityOptions": [],
            "googleMapsUri": "",
            "websiteUri": "",
            "photos": [],
            "types": [],
        }
        if (index!=null) {
            to = data.places[index]
        }
        else {
            to = data
        }
        if (to.hasOwnProperty("id")) {
            listInfo.id = to.id
        }
        if (to.hasOwnProperty("internationalPhoneNumber")) {
            listInfo.internationalPhoneNumber = to.internationalPhoneNumber
        }
        if (to.hasOwnProperty("addressComponents")) {
            to.addressComponents.forEach((ac) => {
                ac.types.forEach((t)=>{
                    if (t == "country") {
                        listInfo.country = ac.shortText
                    }
                    if (t == "administrative_area_level_1") {
                        listInfo.administrative_area_level_1 = ac.shortText
                    }
                })
            })
        }
        if (to.hasOwnProperty("location")) {
            listInfo.location = to.location
        }
        if (to.hasOwnProperty("displayName")) {
            listInfo.TwDisplayName = to.displayName.text
        }
        if (to.hasOwnProperty("primaryType")) {
            listInfo.primaryType = to.primaryType
        }
        if (to.hasOwnProperty("rating")) {
            listInfo.rating = to.rating
        }
        if (to.hasOwnProperty("userRatingCount")) {
            listInfo.userRatingCount = to.userRatingCount
        }
        if (to.hasOwnProperty("formattedAddress")) {
            listInfo.TwFormattedAddress = to.formattedAddress
        }
        if (to.hasOwnProperty("regularOpeningHours")) {
            listInfo.TwWeekdayDescriptions = to.regularOpeningHours.weekdayDescriptions
        }
        if (to.hasOwnProperty("accessibilityOptions")) {
            listInfo.accessibilityOptions = to.accessibilityOptions
        }
        if (to.hasOwnProperty("googleMapsUri")) {
            listInfo.googleMapsUri = to.googleMapsUri
        }
        if (to.hasOwnProperty("websiteUri")) {
            listInfo.websiteUri = to.websiteUri
        }
        if (to.hasOwnProperty("photos")){
            listInfo.photos = to.photos
        }
        if (to.hasOwnProperty("types")){
            listInfo.types = to.types
        }
        return listInfo
    }

    function filterInfoRedis(to) {
        const listInfo = {
            "id": "",
            "internationalPhoneNumber": "",
            "location": null,
            "country": "",
            "administrative_area_level_1": "",
            "TwDisplayName": "",
            "primaryType": "",
            "rating": 0.0,
            "userRatingCount": 0,
            "TwFormattedAddress": "",
            "TwWeekdayDescriptions": [],
            "accessibilityOptions": [],
            "googleMapsUri": "",
            "websiteUri": "",
            "photos": [],
            "types": [],
        }
        if (to.hasOwnProperty("google_id")) {
            listInfo.id = to.google_id
        }
        if (to.hasOwnProperty("international_phone_number")) {
            listInfo.internationalPhoneNumber = to.international_phone_number
        }
        if (to.hasOwnProperty("country")) {
            listInfo.country = to.country
        }
        if (to.hasOwnProperty("administrative_area_level_1")) {
            listInfo.administrative_area_level_1 = to.administrative_area_level_1
        }
        if (to.hasOwnProperty("lat") && to.hasOwnProperty("lng")) {
            listInfo.location = {
                "latitude": parseFloat(to.lat),
                "longitude": parseFloat(to.lng),
            }
        }
        if (to.hasOwnProperty("tw_display_name")) {
            listInfo.TwDisplayName = to.tw_display_name
        }
        if (to.hasOwnProperty("primary_type")) {
            listInfo.primaryType = to.primary_type
        }
        if (to.hasOwnProperty("rating")) {
            listInfo.rating = to.rating
        }
        if (to.hasOwnProperty("user_rating_count")) {
            listInfo.userRatingCount = to.user_rating_count
        }
        if (to.hasOwnProperty("tw_formatted_address")) {
            listInfo.TwFormattedAddress = to.tw_formatted_address
        }
        if (to.hasOwnProperty("tw_weekday_descriptions")) {
            listInfo.TwWeekdayDescriptions = to.tw_weekday_descriptions
        }
        if (to.hasOwnProperty("accessibility_options")) {
            listInfo.accessibilityOptions = to.accessibility_options
        }
        if (to.hasOwnProperty("google_map_uri")) {
            listInfo.googleMapsUri = to.google_map_uri
        }
        if (to.hasOwnProperty("website_uri")) {
            listInfo.websiteUri = to.website_uri
        }
        if (to.hasOwnProperty("photos")){
            listInfo.photos = to.photos
        }
        if (to.hasOwnProperty("types")){
            listInfo.types = to.types
        }
        return listInfo
    }

    function filterInfoFromFavorite(data, index) {
        const listInfo = {
            "id": "",
            "internationalPhoneNumber": "",
            "location": null,
            "country": "",
            "administrative_area_level_1": "",
            "TwDisplayName": "",
            "primaryType": "",
            "rating": 0.0,
            "userRatingCount": 0,
            "TwFormattedAddress": "",
            "TwWeekdayDescriptions": [],
            "accessibilityOptions": [],
            "googleMapsUri": "",
            "websiteUri": "",
            "photos": [],
            "types": [],
        }
        if (index!=null) {
            to = data[index]
        }
        else {
            to = data
        }
        if (to.hasOwnProperty("google_id")) {
            listInfo.id = to.google_id
        }
        if (to.hasOwnProperty("international_phone_number")) {
            listInfo.internationalPhoneNumber = to.international_phone_number
        }
        if (to.hasOwnProperty("country")) {
            listInfo.country = to.country
        }
        if (to.hasOwnProperty("administrative_area_level_1")) {
            listInfo.administrative_area_level_1 = to.administrative_area_level_1
        }
        listInfo.location = {
            "latitude": parseFloat(to.lat),
            "longitude": parseFloat(to.lng),
        }
        if (to.hasOwnProperty("tw_display_name")) {
            listInfo.TwDisplayName = to.tw_display_name
        }
        if (to.hasOwnProperty("primary_type")) {
            listInfo.primaryType = to.primary_type
        }
        if (to.hasOwnProperty("rating")) {
            listInfo.rating = to.rating
        }
        if (to.hasOwnProperty("user_rating_count")) {
            listInfo.userRatingCount = to.user_rating_count
        }
        if (to.hasOwnProperty("tw_formatted_address")) {
            listInfo.TwFormattedAddress = to.tw_formatted_address
        }
        if (to.hasOwnProperty("tw_weekday_descriptions")) {
            listInfo.TwWeekdayDescriptions = to.tw_weekday_descriptions
        }
        if (to.hasOwnProperty("google_map_uri")) {
            listInfo.googleMapsUri = to.google_map_uri
        }
        if (to.hasOwnProperty("website_uri")) {
            listInfo.websiteUri = to.website_uri
        }
        if (to.hasOwnProperty("types")){
            listInfo.types = to.types
        }
        return listInfo
    }

    // clear info card, input's value and selectedPlace
    function ClearQuickInfoAndSearchBar(){
        searchPlaceContainer.classList.add("d-none")
        searchPlaceInformation.innerHTML = ""
        AutoSearchBar.value = ""
        searchPlaceCloseSave.innerHTML = ""
        marker.setMap(null);
    }

    function ClearOffcanvasInfo(){
        offcanvasMarkContainer.classList.add("d-none")
        offcanvasMarkPlaceInformation.innerHTML = ""
        offcanvasMarkPlaceCloseSave.innerHTML = ""
        marker.setMap(null);
    }

    function generateTabelogoToast(googleId, name, returnDataArr) {
        const toast = document.createElement('div');
        toast.className = "toast";
        toast.id = `toast-listener-${googleId}`;
        toast.dataset.bsAutohide = "false";
        toast.role = "alert";
        toast["aria-live"] = "assertive";
        toast["aria-atomic"] = "true";
        const toastHeader = document.createElement('div');
        toastHeader.className = "toast-header";
        toastHeader.innerHTML = `
                <strong class="me-auto">${name}</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>`
        let toastBody;
        if (returnDataArr.hasOwnProperty("error")) {
            toastBody = document.createElement('div');
            toastBody.className = "toast-body";
            toastBody.innerHTML = `No info on tabelog...`
        } else {
            toastBody = generateToastBody(googleId, returnDataArr.result)
        }
        toast.appendChild(toastHeader)
        toast.appendChild(toastBody)
        return toast
    }

    function generateToastBody(googleId, returnDataArr) {
        // create toast body node
        const toastBody = document.createElement('div');
        toastBody.className = "toast-body";
        const row = document.createElement('div');
        row.className = "row";
        row.appendChild(generateToastSideList(googleId, returnDataArr))
        row.appendChild(generateToastMainList(googleId, returnDataArr))
        toastBody.appendChild(row)
        return toastBody
    }

    
    {{/* <div class="col-4">
        <div id="list-example" class="list-group">
        <a class="list-group-item list-group-item-action" href="#list-item-1">Result1</a>
        <a class="list-group-item list-group-item-action" href="#list-item-2">Item 2</a>
        <a class="list-group-item list-group-item-action" href="#list-item-3">Item 3</a>
        <a class="list-group-item list-group-item-action" href="#list-item-4">Item 4</a>
        </div>
    </div> */}}
    function generateToastSideList(googleId, returnDataArr) {
        const col = document.createElement('div');
        col.className = "col-4";
        let HTML=`
            <div id="list-${googleId}" class="list-group">`

        for (let i=0; i<returnDataArr.length; i++){
            HTML +=`<a class="list-group-item list-group-item-action" href="#list-item-${returnDataArr[i].Link}">Result-${i+1}</a>`
        }
        HTML += `</div>`
        col.innerHTML = HTML
        return col
    }

    {{/* <div class="col-8" style="height: 23vh; overflow:scroll;">
        <div data-bs-spy="scroll" data-bs-target="#list-example" data-bs-smooth-scroll="true" class="scrollspy-example text-center" tabindex="0">
            list...
        </div>
    </div> */}}
    function generateToastMainList(googleId, returnDataArr) {
        const col = document.createElement('div');
        col.className = "col-8";
        col.style = "height: 25vh; overflow:scroll;"
        const divc = document.createElement('div');
        divc.dataset.bsSpy = "scroll";
        divc.dataset.bsTarget = `#list-${googleId}`;
        divc.dataset.bsSmoothScroll = "true";
        divc.className = "scrollspy-example text-center";
        divc.tabIndex = "0";
        returnDataArr.forEach((data)=>{
            divc.appendChild(generateToastMainListInfo(data, googleId))
        })
        col.appendChild(divc)
        return col
    }

    function generateToastMainListInfo(data, googleId) {
        const list = document.createElement('div');
        list.className = "mb-4";
        // photo will be appendChild after id:photo-parent-${data.Link}
        let HTML = `
        <div id="photo-parent-${data.Link}" class="mb-2">
            <h6 id="list-item-${data.Link}">${data.Name}</h6>`
        if (data.hasOwnProperty("Type")) {
            HTML += `<div class="row pb-1" style="font-size: 12px; font-weight: 400;">`
            data.Type.forEach((type)=>{
                HTML += `<div class="col card-text">${type}</div>`
            })
            HTML += `</div>`
        }
        if (data.hasOwnProperty("Rating")) {
            HTML += `
            <div class="row pb-1" style="font-size: 12px; font-weight: 400;">
                <div class="col card-text">Rating: ${data.Rating}(${data.RatingCount})</div>               
            </div>`
        }
        if (data.hasOwnProperty("Phone")) {
            HTML += `<div class="card-text " style="font-size: 12px;">${data.Phone}</div>`
        }
        HTML +=`
            <div class="flex" style="font-size: 12px;">
                <a href="${data.Link}" target=â_blankâ style="font-size: 12px;">Tabelog</a>
                <div data-tabe-link="${data.Link}" data-tabe-name="${data.Name}" data-tabe-googleid="${googleId}" class="btn py-0 my-0 tabelogo-photo-btn" style="font-size: 12px;">Tabephoto</div>
            </div>`
        HTML += `</div>`
        list.innerHTML = HTML
        return list
    }

    function generateTabelogoImage() {
        // create Image
        const tabephotoBtn = document.getElementsByClassName("tabelogo-photo-btn")
        for(let i=0;i<tabephotoBtn.length;i++){
            
            const btn = tabephotoBtn[i]
            btn.addEventListener("click", async function(){
                const tabeName = btn.dataset.tabeName
                const tabeLink = btn.dataset.tabeLink
                const tabeGoogleID = btn.dataset.tabeGoogleid
                const headers = new Headers();
                headers.append("Content-Type", "application/json");
                const imgPayload = {
                    google_id: tabeGoogleID,
                    link: tabeLink,
                    name: tabeName,
                }
                const body = {
                    method: 'POST',
                    body: JSON.stringify(imgPayload),
                    headers: headers,
                }
                try {
                    let response = await fetch(tabeLogoImgLink, body)
                    let imgInfo = await response.json()
                    let m;
                    let c;
                    const parEle = document.getElementById(`photo-parent-${tabeLink}`)
                    if (imgInfo.hasOwnProperty("error")) {
                        const notext = document.createElement('div');
                        notext.className = "no-photo";
                        notext.style = "font-size: 12px; font-weight: 400;"
                        notext.innerHTML = "No photo found..."
                        parEle.appendChild(notext)
                        return
                    } else{
                        [m, c] = generateTabelogoImageModalCarousel(imgInfo.result)
                    }
                    const existTM = parEle.getElementsByClassName("tabelogo-modals")
                    const existNoText = parEle.getElementsByClassName("no-photo")
                    if (existNoText.length > 0) {
                        parEle.removeChild(existNoText[0])
                    }
                    if (existTM.length > 0) {
                        setTimeout(function(newEle, old){
                            parEle.replaceChild(newEle, old)
                        }, 100, m, existTM[0])
                    } else {
                        parEle.appendChild(m)
                    }
                    const existCI = parEle.getElementsByClassName("carousel")
                    if(existCI.length > 0) {
                        setTimeout(function(newEle, old){
                            parEle.replaceChild(newEle, old)
                        }, 100, c, existCI[0])
                    } else {
                        parEle.appendChild(c)
                    }
                } catch (error) {
                    console.log(error)
                }
            })
        }
    }

    {{/* <div class="tabelogo-modals">
        <div class="modal fade" id="exampleModal1" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <img src="https://tblg.k-img.com/restaurant/images/Rvw/192621/320x320_rect_6587ab9a0c59fb5499cb1054399607ff.jpg" alt="..." >
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="exampleModal2" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <img src="https://tblg.k-img.com/restaurant/images/Rvw/117269/320x320_rect_117269887.jpg" alt="..." >
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="exampleModal3" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <img src="https://tblg.k-img.com/restaurant/images/Rvw/117265/320x320_rect_117265790.jpg" alt="..." >
                    </div>
                </div>
            </div>
        </div>
    </div>
   
    <div id="carouselExampleFade" class="carousel slide carousel-fade">
        <div class="carousel-inner text-center" style="width:200px; height:130px; cursor: pointer;">
            <div class="carousel-item active" data-bs-toggle="modal" data-bs-target="#exampleModal1">
                <img src="https://tblg.k-img.com/restaurant/images/Rvw/192621/320x320_rect_6587ab9a0c59fb5499cb1054399607ff.jpg" class="d-block w-100" alt="..." >
            </div>
            <div class="carousel-item" data-bs-toggle="modal" data-bs-target="#exampleModal2">
                <img src="https://tblg.k-img.com/restaurant/images/Rvw/117269/320x320_rect_117269887.jpg" class="d-block w-100" alt="..." >
            </div>
            <div class="carousel-item" data-bs-toggle="modal" data-bs-target="#exampleModal3">
                <img src="https://tblg.k-img.com/restaurant/images/Rvw/117265/320x320_rect_117265790.jpg" class="d-block w-100" alt="..." >
            </div>
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleFade" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleFade" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>
     */}}
    function generateTabelogoImageModalCarousel(returnData){
        const modalContainer = document.createElement('div');
        modalContainer.className = "tabelogo-modals";
        for (let i=0; i<returnData.Photo.length; i++) {
            modalContainer.appendChild(generateTabelogoModal(returnData.Link, returnData.Photo[i], i))
        }
        const carouselContainer = document.createElement('div');
        carouselContainer.className = "carousel slide carousel-fade";
        carouselContainer.id = `carousel-${returnData.Link.replace("https://tabelog.com/", "").replace(/\//g,"")}`
        const carouselInner = document.createElement('div');
        carouselInner.className = "carousel-inner text-center";
        carouselInner.style = "width:200px; height:130px; cursor: pointer;"
        for (let i=0; i<returnData.Photo.length; i++) {
            carouselInner.appendChild(generateTabelogoCarouselItem(returnData.Link, returnData.Photo[i], i))
        }
        carouselContainer.appendChild(carouselInner)
        const prevBtn = document.createElement('button');
        prevBtn.className = "carousel-control-prev";
        prevBtn.type = "button";
        prevBtn.dataset.bsTarget = `#carousel-${returnData.Link.replace("https://tabelog.com/", "").replace(/\//g,"")}`;
        prevBtn.dataset.bsSlide = "prev";
        prevBtn.innerHTML = `
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>`
        const nextBtn = document.createElement('button');
        nextBtn.className = "carousel-control-next";
        nextBtn.type = "button";
        nextBtn.dataset.bsTarget = `#carousel-${returnData.Link.replace("https://tabelog.com/", "").replace(/\//g,"")}`;
        nextBtn.dataset.bsSlide = "next";
        nextBtn.innerHTML = `
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>`
        carouselContainer.appendChild(prevBtn)
        carouselContainer.appendChild(nextBtn)

        return [modalContainer, carouselContainer]
    }

    {{/* <div class="modal fade" id="exampleModal3" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <img src="https://tblg.k-img.com/restaurant/images/Rvw/117265/320x320_rect_117265790.jpg" alt="..." >
                </div>
            </div>
        </div>
    </div> */}}
    function generateTabelogoModal(link, image, index) {
        const modal = document.createElement("div")
        modal.className = "modal fade"
        modal.id = `${link.replace("https://tabelog.com/", "").replace(/\//g,"")}-modal-${index}`
        modal.tabIndex = "-1"
        modal["aria-labelledby"] = "exampleModalLabel"
        modal["aria-hidden"] = "true"
        modal.innerHTML = `
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <img src="${image}" alt="..." >
                </div>
            </div>
        </div>
        `
        return modal
    }

    {{/* <div class="carousel-item active" data-bs-toggle="modal" data-bs-target="#exampleModal1">
        <img src="https://tblg.k-img.com/restaurant/images/Rvw/192621/320x320_rect_6587ab9a0c59fb5499cb1054399607ff.jpg" class="d-block w-100" alt="..." >
    </div> */}}
    function generateTabelogoCarouselItem(link, image, index) {
        const item = document.createElement("div")
        item.className = "carousel-item"
        if (index == 0) {
            item.className += " active"
        }
        item.dataset.bsToggle = "modal"
        item.dataset.bsTarget = `#${link.replace("https://tabelog.com/", "").replace(/\//g,"")}-modal-${index}`
        item.innerHTML = `
            <img src="${image}" class="d-block w-100" alt="..." >
        `
        return item
    }

    ShowFavoriteBtn.addEventListener("click", async function(){
        favCountry = null
        favRegion = null
        favoriteListShow()
    })

    async function favoriteListShow() {
        try {
            favoriteListContainer.innerHTML = ""
            favoriteListContainer.classList.add("d-none")
            await generateFavoriteList(10, 0)
            favoriteListContainer.classList.remove("d-none")
            const cclb = document.getElementById("close-country-list-btn")
            if (cclb!=null) {
                cclb.scrollIntoView({behavior: "smooth"})
            }
        } catch (error) {
            console.log(error)
        }
    }

    async function generateFavoriteList(limit, offset) {
        try {
            await refreshToken()
            const headers = new Headers();
            let method = "get_favs"
            headers.append("Content-Type", "application/json");
            headers.append("Authorization", `Bearer ${localStorage.getItem("tabelogo_token")}`);
            const payload = {
                limit: limit,
                offset: offset,
            }
            if (favCountry!=null) {
                payload.country = favCountry
                method = "get_favs_by_country"
                if (favRegion!=null) {
                    payload.administrative_area_level_1 = favRegion
                    method = "get_favs_by_country_region"
                }
            }
            const body = {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(payload)
            }
            favoriteMarkers.forEach((m)=>{
                m.setMap(null)
            })
            favoriteMarkers = []
            favoriteInfoWindows.forEach((iw)=>{
                iw.close()
            })
            favoriteInfoWindows = []
            // show loading
            let response = await fetch(`${brokerUrl}/${method}`, body)
            let responseJSON = await response.json()
            if (responseJSON.hasOwnProperty("error")) {
                if (responseJSON.error == "failed to verify token: token has expired" || responseJSON.error == "token is invalid") {
                    return
                } else {
                    alert(`We meet some problem, please try again later...
                        error: ${responseJSON.error}
                    `)
                }
                return
            }
            if (responseJSON.Favorites.length == 0) {
                return
            }
            // generate new markers and infoWindows
            const closeFn = function(){
                favoriteListContainer.innerHTML = ""
                favoriteListContainer.classList.add("d-none")
                favoriteMarkers.forEach((m)=>{
                    m.setMap(null)
                })
                favoriteMarkers = []
                favoriteInfoWindows.forEach((iw)=>{
                    iw.close()
                })
                favoriteInfoWindows = []
                favCountry = null
                favRegion = null
            }
            const [ccnode, fnode] = await Promise.all([
                generateCloseCountryListButton(closeFn),
                generateFavoriteListHTML(responseJSON.Favorites),  
            ])
            favoriteListContainer.appendChild(ccnode)
            favoriteListContainer.appendChild(fnode)
            // generate observer
            const fnodeLast = fnode.lastChild
            const callback = function (entries) {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        keepGenerateFavoriteList(limit, offset+limit)
                        observer.unobserve(fnodeLast)
                    }
                });
            }
            const observer = new IntersectionObserver(callback);
            observer.observe(fnodeLast);
            generateFavoriteMarkers(map, responseJSON.Favorites)
        }
        catch (error){
            alert(`We meet some problem, please try again later...
                error: ${error}
            `)
            return
        }

    }

    async function keepGenerateFavoriteList(limit, offset) {
        try {
            refreshToken()
            const headers = new Headers();
            headers.append("Content-Type", "application/json");
            headers.append("Authorization", `Bearer ${localStorage.getItem("tabelogo_token")}`);
            const payload = {
                limit: limit,
                offset: offset,
            }
            let method = "get_favs"
            if (favCountry!=null) {
                payload.country = favCountry
                method = "get_favs_by_country"
                if (favRegion!=null) {
                    payload.administrative_area_level_1 = favRegion
                    method = "get_favs_by_country_region"
                }
            }
            const body = {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(payload)
            }
            // show loading
            {{/* generateFavoriteListLoading() */}}
            let response = await fetch(`${brokerUrl}/${method}`, body)
            let responseJSON = await response.json()
            if (responseJSON.hasOwnProperty("error")) {
                if (responseJSON.error == "failed to verify token: token has expired" || responseJSON.error == "token is invalid") {
                    return
                } else {
                    alert(`We meet some problem, please try again later...
                        error: ${responseJSON.error}
                    `)
                }
                return
            }
            if (responseJSON.Favorites.length == 0) {
                return
            }
            const [fnode] = await Promise.all([
                generateFavoriteListHTML(responseJSON.Favorites),  
            ])
            favoriteListContainer.appendChild(fnode)
            // generate observer
            const fnodeLast = fnode.lastChild
            const callback = function (entries) {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        keepGenerateFavoriteList(limit, offset+limit, method)
                        observer.unobserve(fnodeLast)
                    }
                });
            }
            const observer = new IntersectionObserver(callback);
            observer.observe(fnodeLast);
            generateFavoriteMarkers(map, responseJSON.Favorites)
        }
        catch (error){
            alert(`We meet some problem, please try again later...
                error: ${error}
            `)
            return
        }

    }

    async function generateFavoriteListHTML(data) {
        const div = document.createElement('div');
        for (let i=0; i<data.length; i++) {
            try {
                let listInfo = filterInfoFromFavorite(data, i)
                const centerSaveTabe = await generateInfoButton(null, listInfo, null, "favorites-list")
                div.appendChild(centerSaveTabe)
                listnode = generateInfoNode(listInfo)
                listnode.innerHTML += `<hr>`
                div.appendChild(listnode)
            } catch (error) {
                console.log(error)
            }
        }
        return div
    }

    // input: map and searchResult(TW or JP or others...)
    function generateFavoriteMarkers(map, data){
        for (let i=0; i<data.length; i++) {
            let listInfo = filterInfoFromFavorite(data, i)
            const svgMarker = {
                path: "M-1.547 12l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM0 0q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z",
                fillColor: "blue",
                fillOpacity: 1.0,
                strokeWeight: 0,
                rotation: 0,
                scale: 2.0,
                anchor: new google.maps.Point(0, 20),
            };
            const marker = new google.maps.Marker({
                position: {lat: listInfo.location.latitude, lng: listInfo.location.longitude},
                icon: svgMarker,
                map: map,
            });
            // save the marker in array, to clear it later
            favoriteMarkers.push(marker)
            // infoWindow for label name
            const contentString =
            `<a href="#favorites-list-${listInfo.id}">${listInfo.TwDisplayName}</a>`
            const infoWindow = new google.maps.InfoWindow({
                content: contentString,
            });
            infoWindow.setPosition({lat: listInfo.location.latitude, lng: listInfo.location.longitude})
            infoWindow.setOptions({
                disableAutoPan : true, // disable auto pan
                pixelOffset: new google.maps.Size(0, 40) // set the infoWindow position to the marker
            })
            // save the infoWindow in array, to close it later
            favoriteInfoWindows.push(infoWindow)
            infoWindow.open({map, marker});
        }
    }

    async function generateCloseCountryListButton(closeFn) {
        const flex = document.createElement('div');
        flex.id = "close-country-list-btn";
        flex.className = "d-flex justify-content-end align-items-center";
        // fetch country list
        const headers = new Headers();
        headers.append("Content-Type", "application/json");
        headers.append("Authorization", `Bearer ${localStorage.getItem("tabelogo_token")}`);
        const body = {
            method: 'POST',
            headers: headers,
        }
        try {
            let response = await fetch(`${brokerUrl}/get_fav_countries`, body)
            let responseJSON = await response.json()
            if (responseJSON.hasOwnProperty("error")) {
                if (responseJSON.error == "failed to verify token: token has expired" || responseJSON.error == "token is invalid") {
                    return
                } else {
                    alert(`We meet some problem, please try again later...
                        error: ${responseJSON.error}
                    `)
                }
                return flex
            }
            const countryNode = document.createElement('div');
            countryNode.id = "country-select-btn";
            countryNode.className = "dropdown me-2";
            countryNode.innerHTML = `
                <div class="dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" style="cursor:pointer;">
                    <i class="fa-solid fa-globe"></i>${favCountry==null?"":(" "+favCountry)}
                </div>
            `;
            const dropdownNode = document.createElement('ul');
            dropdownNode.className = "dropdown-menu";
            responseJSON.Countries.forEach((c)=>{
                const li = document.createElement('li');
                li.innerHTML = `<button class="dropdown-item" type="button">${c}</button>`
                li.addEventListener("click", async function(){
                    favRegion = null
                    favCountry = c
                    await favoriteListShow()
                    generateRegionButton(c)
                })
                dropdownNode.appendChild(li)
            })
            countryNode.appendChild(dropdownNode)
    
            // close
            const close = document.createElement('div');
            close.id = "close-info-btn";
            close.className = "btn py-1";
            close.innerHTML = `<i class="fa-solid fa-xmark"></i>`;
            close.addEventListener("click", closeFn)
            flex.appendChild(countryNode)
            let regionNode = document.createElement("div");
            regionNode.id = "region-select-btn";
            regionNode.className = "dropdown";
            if (favCountry!=null) {
                regionNode = await generateRegionButton(favCountry)
            }
            flex.appendChild(regionNode)
            flex.appendChild(close)
            return flex
        } catch (error) {
            console.log(error)
        }
    }

    async function generateRegionButton(country) {
        let regionNode = document.getElementById("region-select-btn");
        const headers = new Headers();
        headers.append("Content-Type", "application/json");
        headers.append("Authorization", `Bearer ${localStorage.getItem("tabelogo_token")}`);
        payload = {
            country: country,
        }
        const body = {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(payload)
        }
        try {
            let response = await fetch(`${brokerUrl}/get_fav_regions`, body)
            let responseJSON = await response.json()
            if (responseJSON.hasOwnProperty("error")) {
                if (responseJSON.error == "failed to verify token: token has expired" || responseJSON.error == "token is invalid") {
                    return
                } else {
                    alert(`We meet some problem, please try again later...
                        error: ${responseJSON.error}
                    `)
                }
            }
            
            const dropdownNode = document.createElement('ul');
            dropdownNode.className = "dropdown-menu";
            responseJSON.Regions.forEach((r)=>{
                const li = document.createElement('li');
                li.innerHTML = `<button class="dropdown-item" type="button">${r}</button>`
                li.addEventListener("click", async function(){
                    favRegion = r
                    await favoriteListShow()
                })
                dropdownNode.appendChild(li)
            })
            if (regionNode==null) {
                regionNode = document.createElement('div');
                regionNode.id = "region-select-btn";
                regionNode.className = "dropdown me-2";
                regionNode.innerHTML = `
                <div class="dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" style="cursor:pointer;">
                    <i class="fa-solid fa-mountain-city"></i>${favRegion==null?"":(" "+favRegion)}
                </div>
            `;
                regionNode.appendChild(dropdownNode)
                return regionNode
            } else {
            regionNode.innerHTML = `
                <div class="dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" style="cursor:pointer;">
                    <i class="fa-solid fa-mountain-city"></i>${favRegion==null?"":(" "+favRegion)}
                </div>
            `;
                regionNode.appendChild(dropdownNode)
                return null
            }
        } catch (error) {
            console.log(error)
        }
    }

    async function refreshToken() {
        try {
            const token_update_at = localStorage.getItem("tabelogo_token_update_at")
            if (Date.now()-token_update_at < 1000*60*3) { // update every 3 min
                return
            }
            const refresh_token = localStorage.getItem("tabelogo_refresh_token")
            if (refresh_token === null) {
                window.localStorage.removeItem("tabelogo_token")
                window.localStorage.removeItem("tabelogo_refresh_token")
                alert("Session expired, Please login to use this function")
                return
            }
            const headers = new Headers();
            headers.append("Content-Type", "application/json");
            const payload = {
                refresh_token: refresh_token,
            }
            const body = {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(payload)
            }
            let response = await fetch(`${brokerUrl}/renew_access`, body)
            let responseJSON = await response.json()
            if (responseJSON.hasOwnProperty("error")) {
                if (responseJSON.error == "failed to verify token: token has expired" || responseJSON.error == "token is invalid") {
                    window.localStorage.removeItem("tabelogo_token")
                    window.localStorage.removeItem("tabelogo_refresh_token")
                    alert("Session expired, Please login to use this function")
                } else {
                    alert(`We meet some problem, please try again later...
                        error: ${responseJSON.error}
                    `)
                }
                return
            }
            localStorage.setItem("tabelogo_token", responseJSON.renew.access_token)
            localStorage.setItem("tabelogo_token_expires_at", responseJSON.renew.access_token_expires_at)
        } catch (error) {
            console.log(error)
        }
    }

    </script>
{{end}}
